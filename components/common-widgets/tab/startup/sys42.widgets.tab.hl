
/*
 * Creates an Ajax TabControl type of widget.
 *
 * The TabControl widget, allows you to display multiple tabs, each with its own unique set of [widgets] collection.
 * Notice, the TabControl widget, does not render its non-active items as visible. This means, that there are neither any HTML, nor any
 * server-side [oninit] event invoked for anything inside its tabviews, that is not initially visible, due to being in the initially active 
 * tabview. Still it allows for search engines to crawl its tabviews, due to them seeing the switch active tabview buttons, merely as hyperlinks.
 * This creates nice markup, spends little server resources, while still making it highly accessible.
 *
 * Arguments;
 * 
 * [skin]            - Skin file and class to use. Default value is "default".
 * [items]           - Collection of "TabViews" in your TabControl.
 *                      Each item beneath here, should have a name, and a [widgets] collection. The [widgets] collection, only becomes
 *                      visible, as the user clicks the tabview to show it. The name of the children nodes beneath [_items], becomes the
 *                      friendly displayed name for your TabView.
 * [crawl]           - If true, the widget will be rendered in SEO mode, meaning that crawling is enabled, through hyperlinks.
 * [crawl-get-name]  - Allows you to override the default crawling HTTP GET parameter name. Its default value is "sys42_widgets_tab_unroll".
 */
create-event:sys42.widgets.tab

  /*
   * Applying options for widget, with default values.
   */
  _defaults
    skin:default
    items
    crawl:bool:false
    crawl-get-name:sys42_widgets_tab_unroll
  _options
  add:x:/@_options
    src:x:(/@_defaults(/--!/_arg)|/@_defaults/*)/$


  /*
   * Making sure caller supplied at the very least one item.
   */
  if:x:/../*/_options/*/items/*
    not

    /*
     * No initial items provided.
     */
    throw:You have to supply at the very least one root item when creating your tab widget.


  /*
   * Retrieving the value of the HTTP GET crawl parameter, if any.
   */
  p5.web.query.get:x:/../*/_options/*/crawl-get-name?value


  /*
   * Looping through each [item] in [items], and creating a tabview header item for each of them.
   */
  _index:int:0
  for-each:x:/../*/_options/*/items/*

    /*
     * Adding header item first.
     */
    _header
      container
        element:li
        class:tab-header-item
        widgets
          a
            href:#
            innerValue:x:/@_dp/#?name
            _index:x:/@_index?value
            onclick

              /*
               * Finding root tab widget, for then to find the visible widget, and making it invisible.
               */
              p5.web.widgets.find-ancestor:x:/../*/_event?value
                _root-tab
              p5.web.widgets.find:x:/@p5.web.widgets.find-ancestor/*/*?value
                class:tab-content-item
                visible:true
              p5.web.widgets.property.set:x:/@p5.web.widgets.find/*/*?value
                visible:false

              /*
               * Now finding out which index the currently clicked tab header button is, and making sure
               * we set that content widget to visible.
               */
              p5.web.widgets.property.get:x:/../*/_event?value
                _index
              p5.web.widgets.find:x:/@p5.web.widgets.find-ancestor/*/*?value
                class:tab-content-item
              p5.web.widgets.property.set:x:/@p5.web.widgets.find/*/{0}?value
                :x:/@p5.web.widgets.property.get/*/*?value
                visible:true

              /*
               * Now making sure we remove the "active" CSS class from the previously active button, and set the class for the currently clicked button
               */
              p5.web.widgets.find-like:x:/@p5.web.widgets.find-ancestor/*/*?value
                class:tab-header-active-item
              sys42.utilities.toggle-css-classes:x:/@p5.web.widgets.find-like/*/*?value
                class:tab-header-active-item
              p5.web.widgets.get-parent:x:/../*/_event?value
              sys42.utilities.toggle-css-classes:x:/@p5.web.widgets.get-parent/*/*?value
                class:tab-header-active-item


    /*
     * Checking if caller wants tab control to be crawlable by search engines.
     */
    if:x:/../*/_options/*/crawl?value.bool

      /*
       * Tab control should be crawlable by search engines.
       * Checking if there was an HTTP GET argument matching the "crawl URL", and if it
       * matches the currently iterated item.
       */
      if:x:/@p5.web.query.get/*?value
        and:x:/@p5.web.query.get/*?value
          =:x:/@_dp/#?value

        /*
         * Tab control is in "crawl mode", we have a "crawl URL", and it matches the ID of the currently iterated item.
         *
         * Hence, we simply add up an [oninit] for the currently iterated tabview header button, and clicks it during [oninit].
         */
        add:x:/@_header/*/container/*/widgets/*/a
          src
            oninit
              p5.web.widgets.ajax-events.raise:x:/../*/_event?value
                onclick

      /*
       * Adding the crawl URL to our hyperlink href attribute above.
       */
      eval-x:x:/+/*/*
      set:x:/@_header/*/container/*/widgets/*/a/*/href?value
        sys42.widgets.tab._create-url:x:/@_dp/#?value
          crawl-get-name:x:/../*/_options/*/crawl-get-name?value

    /*
     * Forward evaluating innerValue and _index of header widget, and adding to returned container.
     */
    eval-x:x:/@_header/*/*/*/*(/innerValue|/_index)
    add:x:/../*/return/*/container/*/widgets/*/container/[0,1]/*/widgets
      src:x:/@_header/*

    /*
     * Incrementing [_index].
     */
    set:x:/@_index?value
      +:x:/@_index?value
        _:1

    /*
     * Adding content [widgets] collection.
     */
    _content
      container
        visible:false
        class:tab-content-item
        widgets
    add:x:/@_content/*/*/widgets
      src:x:/@_dp/#/*/widgets/*
    add:x:/../*/return/*/container/*/widgets/*/container/[1,2]/*/widgets
      src:x:/@_content/*


  /*
   * Making sure our first tab item becomes "active".
   */
  set:x:/../*/return/*/container/*/widgets/*/container/[0,1]/*/widgets/*/[0,1]/*/class?value
    src:tab-header-item tab-header-active-item


  /*
   * Making sure our first TabView content becomes visible, and only our first.
   */
  set:x:/../*/return/*/container/*/widgets/*/container/[1,2]/*/widgets/*/[0,1]/*/visible


  /*
   * Forward evaluating [class] and [_skin] inside of [oninit] to make sure we use [_options]/[class] if supplied, and specified skin file.
   */
  eval-x:x:/../*/return/*/*(/class|/oninit/*/_skin)


  /*
   * Returning widget to caller.
   */
  return
    container
      _root-tab
      class:tab-widget-{0}
        :x:/../*/_options/*/skin?value
      oninit

        /*
         * Making sure we include our tab specific CSS file.
         */
        _skin:x:/../*/_options/*/skin?value
        p5.web.include-css-file:/system42/components/common-widgets/tab/media/skins/{0}/{0}.css
          :x:/../*/_skin?value

      /*
       * Contains the tabs for widget
       */
      widgets
        container
          element:ul
          class:tab-header clearfix
          widgets
        container
          class:tab-content-wrapper clearfix
          widgets
