
/*
 * Responsible for creating the CodeMirror Hyperlambda editor widget
 *
 * Arguments;
 *
 * [auto-focus]     - If true, CodeMirror editor will gain initial focus upon load. Defaults to false.
 * [mode]           - Which language type to use. Defaults to 'hyperlambda'.
 * [theme]          - Which theme to use, defaults to 'paraiso'.
 * [height]         - Height, add units, e.g. '250px'. Defaults to '300px'.
 * [value]          - Initial code to display.
 * [events]         - Collection of associated widget lambda events.
 * [keys]           - Collection of keyboard shortcuts. E.g. "Alt-E" to trap ALT+E key. Pass in JavaScript as value for shortcut.
 *                    'cm', being the CodeMirror instance will be passed in.
 */
create-event:sys42.widgets.codemirror


  /*
   * Applying options for widget, with default values.
   * This lambda uses the boolean algebraic "OR" operator, combined with /$ (unique name), ending
   * up prioritizing specified argument, resorting to [_default] value if not given
   */
  _defaults
    auto-focus:false
    mode:hyperlambda
    theme:paraiso
    height:300px
    value:
    events
  _options
  add:x:/@_options
    src:x:(/@_defaults(/--!/_arg)|/@_defaults/*)/$


  /*
   * Check if default Code-Mirror theme setting exists, and if not, create it.
   */
  sys42.settings.ensure-defaults
    app:sys42
    src
      sys42.code-mirror-default-theme:paraiso


  /*
   * Checking if caller supplied an explicit theme, and if not, making sure we use the "default setting theme".
   */
  if:x:/@_defaults/--/theme
    not
    sys42.settings.get:sys42.code-mirror-default-theme
      app:sys42
    set:x:/@_options/*/theme?value
      src:x:/@sys42.settings.get/*?value


  /*
   * Making sure necessary JavaScript files are included
   */
  p5.web.include-javascript-file
    /system42/components/common-widgets/codemirror/media/lib/codemirror.js
    /system42/components/common-widgets/codemirror/media/addon/selection/active-line.js
    /system42/components/common-widgets/codemirror/media/addon/display/placeholder.js
    /system42/components/common-widgets/codemirror/media/addon/display/fullscreen.js
    /system42/components/common-widgets/codemirror/media/addon/hint/show-hint.js
  p5.web.include-javascript-file:/system42/components/common-widgets/codemirror/media/mode/{0}/{0}.min.js
    :x:/../*/_options/*/mode?value


  /*
   * Making sure necessary Stylesheet files are included
   */
  p5.web.include-css-file
    /system42/components/common-widgets/codemirror/media/lib/codemirror.css
    /system42/components/common-widgets/codemirror/media/addon/display/fullscreen.css
    /system42/components/common-widgets/codemirror/media/addon/hint/show-hint.css
  p5.web.include-css-file:/system42/components/common-widgets/codemirror/media/theme/{0}.min.css
    :x:/../*/_options/*/theme?value


  /*
   * Retrieving vocabulary of server, for auto complete to work, among other things, making sure we accommodate for any whitelist definitions.
   */
  _vocabulary
  sys42.widgets.codemirror._whitelist
  if:x:/@sys42.widgets.codemirror._whitelist/*
    not

    /*
     * No whitelist, adding everything.
     */
    vocabulary
    add:x:/@_vocabulary
      src:x:/@vocabulary/*

  else

    /*
     * Whitelist defined, making sure we only retrieve the legal vocabulary sub-set.
     * First we add the results of "get whitelist invocation" above to our temporary [eval-whitelist].
     */
    add:x:/+/*/events
      src:x:/@sys42.widgets.codemirror._whitelist/*

    /*
     * Then creating a whitelist lambda, from where we invoke [vocabulary], to retrieve the legal sub-set of events.
     */
    eval-whitelist
      events

        // Notice, to make sure our [vocabulary] invocation can even be evaluated, we need to add [vocabulary] and [return] to whitelist, while retrieving vocabulary.
        vocabulary
        return
      vocabulary
      return:x:/@vocabulary/*

    /*
     * Then we check if [vocabulary] and [return] are whitelisted, and if not, removing them.
     */
    if:x:/@sys42.widgets.codemirror._whitelist/*/vocabulary
      not
      set:x:/@eval-whitelist/*/vocabulary
    if:x:/@sys42.widgets.codemirror._whitelist/*/return
      not
      set:x:/@eval-whitelist/*/return

    /*
     * Adding results of above [eval-whitelist] invocation to above [_vocabulary] result node, which later is used to create our JSON.
     */
    add:x:/@_vocabulary
      src:x:/@eval-whitelist/*


  /*
   * Creating our JSON vocabulary object to return to client.
   */
  p5.string.join:x:/@_vocabulary/*?value
    sep:,
    wrap:@""""


  /*
   * Including JSON object containing full list of keywords to client.
   *
   * Notice, "p5.web.include-javascript" in case we're having multiple Code-Mirror instances on page!
   */
  p5.web.include-javascript:@"CodeMirror._hyperlispKeywords = [{0}];"
    :x:/@p5.string.join?value


  /*
   * Making sure we handle keyboard shortcuts.
   */
  _keys:,
  for-each:x:/../*/_options/*/keys/*
    set:x:/@_keys?value
      src:{0}{1}
        :x:/@_keys?value
        :@"
  '{0}':function(cm) {{{1}}},"
          :x:/@_dp/#?name
          :x:/@_dp/#?value
  trim-right:x:/@_keys?value
    chars:,


  /*
   * Making sure textarea input is replaced with our CodeMirror instance.
   */
  p5.web.send-javascript:@"p5['{0}'] = CodeMirror.fromTextArea(document.getElementById('{0}'), {{
mode:'hyperlambda',
theme:'{2}',
lineNumbers:true,
styleActiveLine:true,
path:'/system42/components/common-widgets/codemirror/media/',
autofocus:{1},
tabSize:2,
indentAuto:true,
extraKeys: {{
  'Alt-F':function(cm) {{cm.setOption('fullScreen', !cm.getOption('fullScreen'));}}{3},
  'Ctrl-Space':'autocomplete'}}
}});
p5['{0}'].on('change',function (cMirror) {{
  var wdg = p5.$('{0}');
  wdg.el.value = cMirror.getValue();
}});
CodeMirror.keyMap.default['Shift-Tab'] = 'indentLess';
CodeMirror.keyMap.default['Tab'] = 'indentMore';"
    :x:/../*/_arg?value
    :x:/../*/_options/*/auto-focus?value
    :x:/../*/_options/*/theme?value
    :x:/@trim-right?value


  /*
   * Then setting height.
   */
  p5.web.send-javascript:@"p5['{0}'].setSize('100%', '{1}');"
    :x:/../*/_arg?value
    :x:/../*/height?value


  /*
   * Applying any custom widget events to widget.
   */
  if:x:/../*/_options/*/events/*
    add:x:/+/*/*
      src:x:/../*/_options/*/events/*
    add:x:/../*/return/*/literal
      src
        events


  /*
   * Then returning our textarea widget to caller, which becomes replaced with a CodeMirror instance on client side, making sure we forward evaluate
   * its [innerValue], which becomes its initial value.
   */
  eval-x:x:/+/*/*/innerValue
  return
    literal
      element:textarea
      innerValue:x:/../*/_options/*/value?value
