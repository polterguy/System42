
/*
 * Responsible for creating the CodeMirror Executor Hyperlambda widget.
 *
 * This widget, contrary to the pure [sys42.widgets.codemirror] widget, allows you to create an entire executor
 * widget, with both input and output, in addition to a couple of buttons to run and clear the different codemirror modules.
 *
 * This is a nice feature while debugging your own stuff, since it allows you to retrieve variables and such, from other widgets
 * on your page, and test Hyperlambda constructs.
 * Notice, you cannot have multiple instances of this widget on your page.
 *
 * Arguments;
 *
 * [whitelist]         - Optional list of events that can be legally invoked.
 */
create-event:sys42.widgets.codemirror-executor

  /*
   * Applying options for widget, with default values.
   * This lambda uses the boolean algebraic "OR" operator, combined with /$ (unique name), ending
   * up prioritizing specified argument, resorting to [_default] value if not given.
   */
  _defaults
    whitelist
  _options
  add:x:/../*/_options
    src:x:(/@_defaults/--|/@_defaults/*)/$


  /*
   * Making sure our "Evaluate" button is wired up.
   */
  p5.web.include-javascript:@"p5._sys42_widgets_codemirror_executor = function () {
    p5.$('sys42-codemirror-executor-execute').raise('_onclick', {
      onsuccess:function(ret, evt) {
        p5['execute_output'].getDoc().setValue(ret.code);
      }});
      return false;
  }"


  /*
   * Checking if an explicit whitelist was given, and if so, making sure the rest of our page has access to it.
   */
  if:x:/../*/whitelist/*

    /*
     * Appending whitelist definition into widget lambda event below.
     */
    add:x:/../**/sys42.widgets.codemirror._whitelist/*/return
      src:x:/../*/whitelist/*

  else

    /*
     * Removing whitelist lambda event altogether.
     */
    set:x:/../**/sys42.widgets.codemirror._whitelist


  /*
   * Then checking to see if we've got some code stored in session, 
   * and if so, we stuff it into our editor.
   */
  p5.web.session.get:sys42.widgets.codemirror-executor.current-code
  if:x:/@p5.web.session.get/0?value
    set:x:/../**/=execute_input/*/value?value
      src:x:/@p5.web.session.get/0?value


  /*
   * Returning widget creation node to caller, making sure we forward evaluate options first.
   */
  eval-x:x:/+/*/*/class
  return
    container
      events

        /*
         * Return whitelist definition.
         * Notice, our [return] invocation, is populated above.
         */
        sys42.widgets.codemirror._whitelist
          return

      class:col-xs-12
      widgets


        /*
         * Input textarea element, transformed into a CodeMirror widget
         */
        container
          widgets
            sys42.widgets.codemirror:execute_input
              value:
              auto-focus:true
              height:400px
              keys
                Alt-E:"p5._sys42_widgets_codemirror_executor();"
                  


        /*
         * Evaluate widget, executes execute_input, and puts the 
         * resulting code into execute_output
         */
        container

          /*
           * Necessary to have the next widget obey its "margin-top" CSS.
           */
          style:"overflow:auto;"

          widgets
            literal:sys42-codemirror-executor-execute
              class:btn btn-default btn-attach-top col-lg-2 col-lg-offset-10 col-md-3 col-md-offset-9 col-xs-4 col-xs-offset-8
              element:button
              innerValue:Evaluate
              title:Keyboard shortcut ALT+E


              /*
               * Trickery to make sure we can handle our event in JavaScript
               * to retrieve custom JSON return values from server in JavaScript
               * the actual event handler is "_onclick", but this event is hidden,
               * and won't be rendered to the browser since it ends with "_".
               * the DOM javascript onclick event handler though, invokes a JavaScript function,
               * which actually invokes the actual server-side event, which again returns
               * the executed code as a piece of string, named "code", which the JavaScript
               * again puts into the "execute_output" CodeMirror widget.
               */
              onclick:"return p5._sys42_widgets_codemirror_executor();"
              _onclick

                /*
                 * Making sure output widget and clear widget becomes visible.
                 */
                p5.web.widgets.property.set:sys42_widgets_codemirror_output_wrapper
                  style:"height:inherit;"

                /*
                 * Retrieving whitelist definition, if any.
                 */
                sys42.widgets.codemirror._whitelist

                /*
                 * First retrieving text from execute_input textarea and converting to lambda
                 */
                p5.web.widgets.property.get:execute_input
                  innerValue
                hyper2lambda:x:/@p5.web.widgets.property.get/*/*?value

                /*
                 * Then storing current code in session such that code editor remembers content
                 */
                set:x:/../*/p5.web.session.set/*/src?value
                  src:x:/@p5.web.widgets.property.get/+/<?value
                p5.web.session.set:sys42.widgets.codemirror-executor.current-code
                  src

                /*
                 * Checking if we have a whitelist.
                 */
                if:x:/@sys42.widgets.codemirror._whitelist/*

                  /*
                   * Then executing lambda, in such a way that our converted hyperlambda becomes the "root node", 
                   * while still reachable after execution is done.
                   */
                  set:x:/..if/*/eval-whitelist/*/_exe/#/*
                  add:x:/..if/*/eval-whitelist/*/_exe/#
                    src:x:/@hyper2lambda/*

                  /*
                   * Notice, whitelist defined, in addition to using [eval-mutable], since we want to retrieve transformed code after execution.
                   */
                  add:x:/..if/*/eval-whitelist/*/events
                    src:x:/@sys42.widgets.codemirror._whitelist/*
                    src:eval-mutable
                  eval-whitelist
                    events
                    _exe:node:"exe"
                    eval-mutable:x:/@_exe/#
                    return:x:/@_exe

                  /*
                   * Then converting lambda result to Hyperlambda, and returning back to client as JSON
                   */
                  lambda2hyper:x:/@eval-whitelist/*/_exe/#/*
                  p5.web.return-response-object:code
                    src:x:/@lambda2hyper?value

                else

                  /*
                   * Then executing lambda, in such a way that our converted hyperlambda becomes the "root node", 
                   * while still reachable after execution is done.
                   */
                  _exe:node:"exe"
                  set:x:/@_exe/#/*
                  add:x:/@_exe/#
                    src:x:/@hyper2lambda/*

                  /*
                   * Notice, [eval-mutable], since we want to retrieve transformed code after execution.
                   */
                  eval-mutable:x:/@_exe/#

                  /*
                   * Then converting lambda result to Hyperlambda, and returning back to client as JSON
                   */
                  lambda2hyper:x:/@_exe/#/*
                  p5.web.return-response-object:code
                    src:x:/@lambda2hyper?value


        /*
         * Output textarea element, transformed into a CodeMirror widget later
         */
        container:sys42_widgets_codemirror_output_wrapper
          class:prepend-top
          style:"height:0;overflow:hidden;"
          widgets
            sys42.widgets.codemirror:execute_output
              height:200px
