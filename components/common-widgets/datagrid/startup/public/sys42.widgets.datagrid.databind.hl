
/*
 * Databinds the specified [_arg] datagrid.
 */
create-event:sys42.widgets.datagrid.databind

  /*
   * Retrieving current page, number of items per page, and query (filter).
   */
  p5.web.widgets.property.get:x:/../*/_arg?value
    _current-page
    _page-size
    _query

  /*
   * Storing currently selected items, if there are any, to make sure we can make them selected again, 
   * after having databound the grid again.
   */
  _selected
  p5.web.widgets.find-like:x:/../*/_arg?value
    element:tr
    class:selected
  if:x:/@p5.web.widgets.find-like/*/*?value

    /*
     * There are one or more selected rows in our datagrid.
     * Making sure we add them to our [_selected] collection above, such that we can make sure they stay selected, 
     * also after databinding is done.
     */
    p5.web.widgets.property.get:x:/@p5.web.widgets.find-like/*/*?value
      _row
    add:x:/../*/_selected
      src:x:/@p5.web.widgets.property.get/*/*?value

  /*
   * Checking if we have a zero or negative value in current page, at which case we disable previous button.
   */
  if:x:/../*/p5.web.widgets.property.get/*/*/_current-page?value.int
    <=:int:0

    /*
     * We're at the first page in our datagrid.
     * Making sure we disable the previous button.
     */
    p5.web.widgets.find:x:/../*/_arg?value
      innerValue:&lt;
      element:a
    sys42.utilities.add-css-classes:x:/-/*/*?value
      class:disabled

    /*
     * Checking if value was negative, which might occur if user clicks many times, before Ajax requests
     * are finished, at which case we set it to zero, and return early.
     */
    if:x:/@p5.web.widgets.property.get/*/*/_current-page?value.int
      <:int:0

      /*
       * Oops, we have a negative currrent page.
       * Making sure we set it to zero, before we return "false" to signal that no databind operation actually occurred.
       */
      p5.web.widgets.property.set:x:/../*/_arg?value
        _current-page:0
      return:bool:false

  else

    /*
     * Enabling previous button.
     */
    p5.web.widgets.find:x:/../*/_arg?value
      innerValue:&lt;
      element:a
    sys42.utilities.delete-css-classes:x:/-/*/*?value
      class:disabled

  /*
   * Multiplying current page number with number of items, and setting [start] argument
   * of [sys42.widgets.datagrid._get-items] invocation.
   */
  set:x:/../*/sys42.widgets.datagrid._get-items/*/start?value
    *:x:/@p5.web.widgets.property.get/*/*/_current-page?value.int
      _:x:/@p5.web.widgets.property.get/*/*/_page-size?value

  /*
   * Adding number of items to [start], and setting [end] argument of [sys42.widgets.datagrid._get-items] invocation.
   */
  set:x:/../*/sys42.widgets.datagrid._get-items/*/end?value
    +:x:/../*/sys42.widgets.datagrid._get-items/*/start?value.int
      _:x:/@p5.web.widgets.property.get/*/*/_page-size?value

  /*
   * Checking if we have a query.
   */
  if:x:/@p5.web.widgets.property.get/*/*/_query?value
    eval-x:x:/+/*/*
    add:x:/../*/sys42.widgets.datagrid._get-items
      src
        query:x:/../*/p5.web.widgets.property.get/*/2?value

  /*
   * Retrieving current page's items.
   */
  sys42.widgets.datagrid._get-items:x:/../*/_arg?value
    start
    end

  /*
   * Checking if we're at the end of our dataset.
   * If [.on-get-items] did not return a full page, we're at the end, and there are no more items.
   * Hence, we disable the next button.
   */
  if:x:/@sys42.widgets.datagrid._get-items/*/items/*?count
    <:x:/@p5.web.widgets.property.get/*/*/_page-size?value.int

    /*
     * No more items, disabling next button.
     */
    p5.web.widgets.find:x:/../*/_arg?value
      innerValue:&gt;
      element:a
    sys42.utilities.add-css-classes:x:/@p5.web.widgets.find/*/*?value
      class:disabled

    /*
     * Checking if this was an empty result set, which might occur if user clicks button several times, or 
     * number of items in database as a whole, is exact modulo of page size.
     *
     * If it is empty, we do not databind the datagrid again, since that would create an empty page.
     * Exception is, if datagrid's page is zero, which might mean user deleted last record, or filtered
     * such that no records should show, which might occur after an edit operation, where there was a filter supplied, etc.
     */
    if:x:/@sys42.widgets.datagrid._get-items/*/items/*?count
      =:int:0
      and:x:/@p5.web.widgets.property.get/*/*/_current-page?value.int
        !=:int:0

      /*
       * Returning false, to signal that no actual databind operation occurred.
       */
      return:bool:false

  else

    /*
     * Items return from [.on-get-items] was the size of page, which means that there might be more items in dataset as a whole.
     * Hence, we enable the next button.
     */
    p5.web.widgets.find:x:/../*/_arg?value
      innerValue:&gt;
      element:a
    sys42.utilities.delete-css-classes:x:/-/*/*?value
      class:disabled

  /*
   * NOW we can start the actual databind operation of our DataGrid!
   *
   * Clearing out current items from datagrid (tbody widget) first.
   */
  p5.web.widgets.find:x:/../*/_arg?value
    element:tbody
  p5.web.widgets.clear:x:/@p5.web.widgets.find/*/*?value

  /*
   * Applying the [items] returned above to [_append-items] invocation.
   */
  add:x:/+
    src:x:/../*/sys42.widgets.datagrid._get-items/*/items
  sys42.widgets.datagrid._append-items:x:/../*/_arg?value

  /*
   * Making sure we set all previously selected items to selected again, by looping through the [_selected] collection
   * created further up in event, and adding the "selected" CSS class.
   */
  for-each:x:/../*/_selected/*?name
    p5.web.widgets.find:x:/../*/_arg?value
      _row:x:/@_dp?value
    sys42.utilities.add-css-classes:x:/@p5.web.widgets.find/*/*?value
      class:selected

  /*
   * Returning success to caller, since datagrid was actually databound.
   */
  return:bool:true
