/*
 * Phosphorus Five, copyright 2014 - 2017, Thomas Hansen, thomas@gaiasoul.com
 * 
 * This file is part of Phosphorus Five.
 *
 * Phosphorus Five is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3, as published by
 * the Free Software Foundation.
 *
 *
 * Phosphorus Five is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Phosphorus Five.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * If you cannot for some reasons use the GPL license, Phosphorus
 * Five is also commercially available under Quid Pro Quo terms. Check 
 * out our website at http://gaiasoul.com for more details.
 */





/*
 * First the styles for the main TreeView widget.
 */


/*
 * Making sure we increase font size to 150%, to create a larger TreeView.
 */
.tree-widget-medium {
    font-size:1.5em;
}





/*
 * Then the styles for "ul" HTML elements.
 */


/*
 * The children "ul" element of tree items.
 *
 * Making sure we remove all list styles, in addition to removing default padding.
 */
.tree-widget-medium ul.tree-item-children {
    padding-left:0;
    list-style:none;
}


/*
 * Making sure we hide "ul" elements, that are shown, but hidden afterwards, by a collapse operation.
 */
.tree-widget-medium ul.tree-hidden {
    display:none;
}





/*
 * Then the styles for "li" HTML elements.
 */


/*
 * Making sure items by default are NOT indented.
 */
.tree-widget-medium li.tree-item {
    padding-left:0;
}


/*
 * Making sure only items more than 1st level are indendent.
 * Basically, overriding the above class, for everything but 1st level elements.
 */
.tree-widget-medium li.tree-item > ul.tree-item-children > li.tree-item {
    padding-left:15px;
}


/*
 * Animations for showing children items during expansion of children items.
 */
@keyframes tree-item-children-animation-child-li {
    0% {
        opacity:0;
        margin-left:-180px;
    }
    100% {
        opacity:1;
        margin-left:0;
    }
}


/*
 * The animation class for showing children items of an item.
 */
.tree-widget-medium ul.tree-item-children-animate > li.tree-item {
    opacity:0;
    animation-name: tree-item-children-animation-child-li;
    animation-duration: .3s;
    animation-fill-mode:forwards;
}


/*
 * To create a "snake curling effect", we delay the animations for 0.05 additional seconds, for every children
 * element, beneath another item during expansion.
 * Notice, we roundtrip the animation delay, after 10 items, which means if you have more than 10 children items, it
 * will create "multiple snake animations".
 */
.tree-widget-medium ul.tree-item-children-animate > li.tree-item:nth-child(10n+1) {
    animation-delay:.05s;
}
.tree-widget-medium ul.tree-item-children-animate > li.tree-item:nth-child(10n+2) {
    animation-delay:.1s;
}
.tree-widget-medium ul.tree-item-children-animate > li.tree-item:nth-child(10n+3) {
    animation-delay:.15s;
}
.tree-widget-medium ul.tree-item-children-animate > li.tree-item:nth-child(10n+4) {
    animation-delay:.20s;
}
.tree-widget-medium ul.tree-item-children-animate > li.tree-item:nth-child(10n+5) {
    animation-delay:.25s;
}
.tree-widget-medium ul.tree-item-children-animate > li.tree-item:nth-child(10n+6) {
    animation-delay:.30s;
}
.tree-widget-medium ul.tree-item-children-animate > li.tree-item:nth-child(10n+7) {
    animation-delay:.35s;
}
.tree-widget-medium ul.tree-item-children-animate > li.tree-item:nth-child(10n+8) {
    animation-delay:.40s;
}
.tree-widget-medium ul.tree-item-children-animate > li.tree-item:nth-child(10n+9) {
    animation-delay:.45s;
}





/*
 * Then the styles for the hyperlinks inside of "li" elements.
 */


/*
 * Making sure hyperlinks are rendered as block level elements, in addition to without underline decoration, in addition
 * to making them black and some higher line-height, to give some spacing between items.
 */
.tree-widget-medium a.tree-item-label {
    text-decoration:none;
    display:block;
    height:100%;
    line-height:1.2em;
    color:rgba(0,0,0,.8);
}


/*
 * Making sure hovered items have visual clues.
 */
.tree-widget-medium a.tree-item-label:hover {
    background-color:rgba(0,0,0,.1);
}


/*
 * Making sure selected items have visual clues.
 */
.tree-widget-medium li.tree-item > a.tree-selected {
    background-color:rgba(128,255,128,.3);
}





/*
 * Then our icon span elements.
 */


/*
 * Making sure the icons (folder icons by default) have some additional margin, meaning spacing between icon and text,
 * in addition to that they render with light yellow color.
 * 
 * Notice, these are the folder icons, and not the expanded/collapsed glyphicons.
 */
.tree-widget-medium a.tree-item-label .glyphicon {
    margin-right:10px;
    color:rgba(200,200,0,.3);
}





/*
 * Then making sure we create collapse/expand icons, by injecting content into DOM, with glyphicon font, rendering
 * a "glyphicon-chevron-down" and "glyphicon-chevron-up" for expansion and collapsing.
 */


/*
 * Making sure our hyperlinks on expanded items have the "chevron-up" glyphicon.
 */
.tree-widget-medium li.tree-item > a.tree-item-label:before {
  font-family: "Glyphicons Halflings";
  content: "\e113";
  font-size:.7em;
  color:rgba(0,0,0,.3);
  margin-right:5px;
}


/*
 * Making sure our hyperlinks on expanded items have the "chevron-down" glyphicon.
 */
.tree-widget-medium li.tree-expanded > a.tree-item-label:before {
  content: "\e114";
}


/*
 * Making sure leaf nodes are indented by the size of our glyphicon, to allow them to line up
 * with none-leaf items.
 */
.tree-widget-medium li.tree-leaf > a.tree-item-label {
  padding-left:20px;
}


/*
 * Removing glyphicon from leaf nodes.
 */
.tree-widget-medium li.tree-leaf > a.tree-item-label:before {
  content:none;
}



