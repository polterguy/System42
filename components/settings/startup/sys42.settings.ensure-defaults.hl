
/*
 * Creates the given default settings, if they do not already exist.
 *
 * Returns the names of all settings that was created as a result.
 *
 * Arguments;
 *
 * [app]          - Name of application to which setting belongs.
 * [username]     - Username to which settings belongs to.
 * [src]          - Collection of settings to which to check if exists.
 */
create-event:sys42.settings.ensure-defaults

  /*
   * Sanity check
   */
  if:x:/../*/app?value
    not
    throw:No application specified!

  /*
   * Retrieving currently logged in user, and parametrizing invocations to settings below.
   */
  whoami
  add:x:/../*/for-each/**(/sys42.settings.get|/sys42.settings.set)
    src:x:/../*(/app|/username)

  /*
   * Looping through each setting from [src] argument, checking if setting exists, and if not, create its default value.
   */
  for-each:x:/../*/src/*

    /*
     * Checking if setting exists, and if not, create it.
     */
    sys42.settings.get:x:/@_dp/#?name
    if:x:/@sys42.settings.get/*
      not

      /*
       * Setting did not exist.
       * Making sure we create it, passing in all default values given.
       */
      add:x:/..if/*/sys42.settings.set/*/src
        src:x:/@_dp/#/*
      set:x:/..if/*/sys42.settings.set/*/src?value
        src:x:/@_dp/#?value
      sys42.settings.set:x:/@_dp/#?name
        src

      /*
       * Returning name of currently iterated setting, to signal to caller that we had to create it.
       */
      insert-before:x:/../0
        src:x:/@_dp/#?name
