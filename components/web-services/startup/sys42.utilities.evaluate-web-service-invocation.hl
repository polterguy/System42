
/*
 * Creates the Active Event that evaluates a Web Service invocation.
 *
 * Will parse the incoming request HTTP POST request body, evaluate it, and [p5.web.echo] its result back to client.
 * If the request is a POST request, and has a Content-Type of "application/x-hyperlambda", the request will be treated as a web service invocation,
 * otherwise a GUI will be loaded, to allow the user to play around with the web service endpoint, evaluating Hyperlambda in a CodeMirror instance,
 * according to which Active Events is whitelisted.
 */
create-event:sys42.utilities.evaluate-web-service-invocation

  /*
   * Sanity check.
   */
  p5.web.request.get-method
  p5.web.header.get:Content-Type
  if:x:/@p5.web.request.get-method?value
    !=:POST
    or:x:/@p5.web.header.get/*/Content-Type?value
      !=:application/x-hyperlambda

    /*
     * Loading up UI for playing around with web service.
     */
    add:x:/+
      src:x:/../*/whitelist
    sys42.utilities.load-web-service-ui

  else

    /*
     * Regardless of what happens, from this point, we return lambda to caller.
     */
    p5.web.header.set
      Content-Type:application/x-hyperlambda

    /*
     * Making sure we wrap the entire execution of page inside a [try]/[catch] block.
     */
    try

      /*
       * Both of the above criteria were met, and we can continue evaluating Web Service request.
       * First we retrieve the HTTP POST body.
       */
      p5.web.request.get-body

      /*
       * Then we check if a [whitelist] argument was supplied during invocation, and if so, we make sure we use it.
       */
      if:x:/../*/whitelist

        /*
         * Caller specified a [whitelist] argument, appending body of HTTP request into an [eval-whitelist] invocation, with [events] being the
         * specified [whitelist] collection's content, anda [.lambda] being the HTTP request body.
         */
        add:x:/..if/*/eval-whitelist/*/events
          src:x:/../*/whitelist/*
        add:x:/..if/*/eval-whitelist
          src:x:/@p5.web.request.get-body/*
        eval-whitelist
          events

        /*
         * Returning results of above [eval-whitelist] invocation to caller, before we return results to caller.
         * Notice, we return it as [_result] node being the root node of invocation.
         */
        set:x:/@eval-whitelist?name
          src:_success
        p5.web.echo:x:/@_success

      else

        /*
         * No [whitelist] argument was supplied, simply evaluating body as is.
         */
        eval:x:/@p5.web.request.get-body
        set:x:/@eval?name
          src:_result
        p5.web.echo:x:/@_result

    catch

      /*
       * Returning the ghist of our exception to caller.
       */
      p5.web.response.set-status-code:500
      _error
      add:x:/@_error
        src:x:/@message
      add:x:/@_error
        src:x:/@type
      add:x:/@_error
        src:x:/@stack-trace
      p5.web.echo:x:/@_error
