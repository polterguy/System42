
/*
 * Allow the user to see "coverage" of p5.lambda Active Events, in regards to
 * how many times each "keyword" is invoked from the test suite in total
 */



/*
 * Lists all static Active Events in system that doesn't contain a "." in their names
 */
vocabulary
set:x:/-/*/=

/*
 * Then loading up all unit test files, making sure we remove the "launch.hl" file
 */
p5.io.folder.list-files:@TESTS/tests/
  filter:.hl
set:x:/-/*/~launch.hl
p5.io.file.load:x:/-2/*?name

/*
 * Then looping through our vocabulary, and figuring out how many times each Active Event can be found 
 * in the combined results for ALL of our unit test files.
 */
for-each:x:/../*/vocabulary/*
  add:x:/./*/_dp/#
    src:"{0}:int:{1}"
      :x:/..for-each/*/_dp/#?value
      :x:/../*/p5.io.file.load/*/*/**/\{0}?count
        :x:/..for-each/*/_dp/#?value

/*
 * Then we sort descending our vocabulary/hit-count list
 */
sort-desc:x:/../*/vocabulary/*/*
  if:x:/@_lhs/#?value
    <:x:/@_rhs/#?value
    return:1
  else-if:x:/@_rhs/#?value
    <:x:/@_lhs/#?value
    return:-1

/*
 * To lambda objects used when [apply]'ing to HTML table below.
 * The first lambda is used to figure out which CSS class to use for row.
 */
_get-css-for-row
  if:x:/../*/_dn/#?value.int
    =:int:0
    return
      class:danger
  else-if:x:/../*/_dn/#?value.int
    <=:int:2
    return
      class:warning
  else
    return
      class:success

/*
 * This lambda object is used to figure out which "info" to show for row
 */
_get-info-for-row
  if:x:/../*/_dn/#?value.int
    =:int:0
    return
      td
        innerValue:No tests!
  else-if:x:/../*/_dn/#?value.int
    <=:int:2
    return
      td
        innerValue:Not enought!
  else
    return
      td
        innerValue:OK

/*
 * Then [apply]'ing to our [widgets] node in our [p5.web.widgets.create-container] invocation below,
 * to create one row for each keyword.
 */
apply:x:/../*/p5.web.widgets.create-container/*/widgets/**/table/*/widgets
  src:x:/../*/sort-desc/*
  template
    tr
      {@eval}:x:/../*/_get-css-for-row
      widgets
        td
          {innerValue}:x:?name
        td
          {innerValue}:x:?value
        {@eval}:x:/../*/_get-info-for-row

/*
 * Now we can create our "coverage" report for uni tests.
 * Notice, we create a modal window, with an HTML table inside of it,
 * with one row for each "keyword".
 */
p5.web.widgets.create-container
  class:modal fade
  oninit
    p5.web.send-javascript:@"$('#{0}').modal('toggle');"
      :x:/../*/_event?value
  widgets
    container
      class:modal-dialog
      role:document
      widgets
        container
          class:modal-content
          widgets
            container
              class:modal-header
              widgets
                literal
                  element:button
                  class:close
                  data-dismiss:modal
                  aria-label:Close
                  innerValue:&times;
                literal
                  element:h4
                  innerValue:Coverage of Active Events in test suite
            container
              class:modal-body
              widgets
                table
                  class:table table-hover table-condensed
                  style:"font-size:small;"
                  widgets
                    tr
                      widgets
                        th
                          style:"border-top:none;"
                          innerValue:Active Event
                        th
                          style:"border-top:none;"
                          innerValue:Hit count
                        th
                          style:"border-top:none;"
                          innerValue:Assessment

