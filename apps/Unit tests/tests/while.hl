
/*
 * Unit tests for [while].
 */


While node exists
  _input
    foo1
    foo2
    foo3
  _output
  while:x:/@_input/*
    add:x:/@_output
      src:x:/@_input/0
    set:x:/@_input/0
  if:x:/@_input/*?count
    !=:int:0
    or:x:/@_output
      !=:node:@"_output
  foo1
  foo2
  foo3"
    throw:Assert error, [while] misbehaved


While integer not equals zero
  _result
  _int:int:5
  while:x:/@_int?value
    !=:int:0
    set:x:/@_result?value
      src:{0}*
        :x:/@_result?value
    set:x:/@_int?value
      -:x:/@_int?value
        _:int:1
  if:x:/@_result?value
    !=:*****
    or:x:/@_int?value
      !=:int:0
    throw:Assert error, [while] misbehaved


While boolean condition yields true
  _result
  _bool:bool:true
  while:x:/@_bool?value
    set:x:/@_result?value
      src:{0}*
        :x:/@_result?value
    set:x:/@_bool?value
      src:bool:false
  if:x:/@_result?value
    !=:*
    throw:Assert error, [while] misbehaved


While boolean condition equals false
  _result
  _bool:bool:false
  while:x:/@_bool?value
    =:bool:false
    set:x:/@_result?value
      src:{0}*
        :x:/@_result?value
    set:x:/@_bool?value
      src:bool:true
  if:x:/@_result?value
    !=:*
    throw:Assert error, [while] misbehaved


Breaking constant boolean condition
  _result
  while:bool:true
    set:x:/@_result?value
      src:{0}*
        :x:/@_result?value
    break
  if:x:/@_result?value
    !=:*
    throw:Assert error, [while] misbehaved


Breaking expression condition on second iteration
  _input
    foo1
    foo2
    foo3
  _output
  while:x:/@_input/*
    add:x:/@_output
      src:x:/@_input/0
    if:x:/@_input/0?name
      =:foo2
      break
    set:x:/@_input/0
  if:x:/../*/_output
    !=:node:@"_output
  foo1
  foo2"
    throw:Assert error, [while] misbehaved


Breaking a nested while
  _input
    foo1
    foo2
    foo3
  _output
  while:x:/@_input/0
    add:x:/@_output
      src:x:/@_input/0
    while:x:/@_input/0
      add:x:/@_output
        src:x:/@_input/0
      break
      add:x:/@_output
        src:x:/@_input/0
    set:x:/@_input/0
  if:x:/@_output
    !=:node:@"_output
  foo1
  foo1
  foo2
  foo2
  foo3
  foo3"
    throw:Assert error, [while] misbehaved


Continue while
  _input
    foo1
    foo2
    foo3
  _output
  while:x:/@_input/0
    add:x:/@_output
      src:x:/@_input/0
    set:x:/@_input/0
    continue
    add:x:/@_output
      src:x:/@_input/0
  if:x:/@_output
    !=:node:@"_output
  foo1
  foo2
  foo3"
    throw:Assert error, [while] misbehaved


Continue nested while
  _input
    foo1
    foo2
    foo3
  _output
  while:x:/@_input/0
    while:x:/@_input/0?value
      set:x:/@_input/0?value
      continue
      add:x:/@_output
        src:x:/@_input/0
    add:x:/@_output
      src:x:/@_input/0
    set:x:/@_input/0
  if:x:/@_output
    !=:node:@"_output
  foo1
  foo2
  foo3"
    throw:Assert error, [while] misbehaved


Return from nested while
  _input
    foo1
    foo2
    foo3
  _output
  while:x:/@_input/0
    add:x:/@_output
      src:x:/@_input/0
    eval
      while:bool:true
        return:foo
        add:x:/@_output
          src:x:/@_input/0
    add:x:/@_output
      src:x:/@eval?value
    set:x:/@_input/0
  if:x:/@_output
    !=:node:@"_output
  foo1
  foo
  foo2
  foo
  foo3
  foo"
    throw:Assert error, [while] misbehaved


// Uncomment below tests to check if "infinite loop guard" is functioning correctly.
// Warning, spends a lot of time ...
/*
Throw on infinite loop
  _result
  try
    while:bool:true
      _foo
  catch
    set:x:/@_result?value
      src:success
  if:x:/@_result?value
    !=:success
    throw:Assert error, [while] misbehaved


No throw on unchecked
  _result:int:0
  while:x:/@_result?value
    <:int:6000
    _unchecked:bool:true
    set:x:/@_result?value
      +:x:/@_result?value
        _:int:1
  if:x:/@_result?value
    !=:int:6000
    throw:Assert error, [while] misbehaved
*/