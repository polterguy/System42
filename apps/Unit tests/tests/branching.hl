
/*
 * Contains unit tests for [if], [else-if] and [else].
 */


/*
 * Simple if exists
 */


If with constant string
  if:success
  else
    throw:Assert error, [if] misbehaved


If with constant true boolean
  if:bool:true
  else
    throw:Assert error, [if] misbehaved


If with constant false boolean
  if:bool:false
    throw:Assert error, [if] misbehaved


If with constant 1 integer
  if:int:1
  else
    throw:Assert error, [if] misbehaved


If with constant 0 integer

  // Notice, the integer value of 0 actually yields true in conditional Active Events, since there "exists" an object, 
  // and the object is not boolean false. Only null and false objects yields a false result.
  if:int:0
  else
    throw:Assert error, [if] misbehaved


If with value expression, yielding null
  if:x:/@_nothing?value
    throw:Assert error, [if] misbehaved


If with name expression, yielding null
  if:x:/@_nothing?name
    throw:Assert error, [if] misbehaved


If with node expression, yielding null
  if:x:/@_nothing
    throw:Assert error, [if] misbehaved


If with count expression, yielding 0

  // Notice, a count expression always returns an object, even if the count is zero, hence [if] evaluates to true, due to having returned an "something".
  // There is no automatic conversion between types in Phosphorus Five (such as zero) to booleans, except for "null" (nothing becomes false) 
  // and "non-null" (something becomes true).
  if:x:/@_nothing?count
  else
    throw:Assert error, [if] misbehaved


If with count expression, yielding 1
  _something
  if:x:/@_something?count
  else
    throw:Assert error, [if] misbehaved


If with value expression, yielding single string
  _something:x
  if:x:/@_something?value
  else
    throw:Assert error, [if] misbehaved


If with value expression, yielding single 1 integer
  _something:int:1
  if:x:/@_something?value
  else
    throw:Assert error, [if] misbehaved


If with value expression, yielding single 0 integer
  _something:int:0
  if:x:/@_something?value
  else
    throw:Assert error, [if] misbehaved


If with value expression, yielding single true boolean
  _something:bool:true
  if:x:/@_something?value
  else
    throw:Assert error, [if] misbehaved


If with value expression, yielding single false boolean

  // Notice, since expression in [if] below, yields one single value, and this value is a boolean, having the value of "false", the [if] condition
  // will yield false too. This is the only exception in regards to "exists" that exists in Phosphorus Five.
  // All other object types, will exclusively be checked for existence, including multiple boolean false values.
  _something:bool:false
  if:x:/@_something?value
    throw:Assert error, [if] misbehaved


If with value expression, yielding multiple true booleans
  _something
    _data1:bool:true
    _data2:bool:true
  if:x:/@_something/*?value
  else
    throw:Assert error, [if] misbehaved


If with value expression, yielding multiple false booleans

  // Notice, even though the expression in our [if] yields exclusively boolean values, and they're all false, the [if] will still not 
  // yield false, since there are multiple results. Only a single boolean value of "false" in an expression will be automatically onverted into false
  // on behalf of the condition.
  _something
    _data1:bool:false
    _data2:bool:false
  if:x:/@_something/*?value
    throw:Assert error, [if] misbehaved


Else not evaluated on event condition returning string
  if
    foo-bar-non-existing:some-text
  else
    throw:Assert error, [if] misbehaved


Else evaluated on event condition returning null
  if
    foo-bar-non-existing
    throw:Assert error, [if] misbehaved


/*
 * Comparisons.
 */


Compare constant string = constant string, values equal
  if:something
    =:something
  else
    throw:Assert error, [if] misbehaved


Compare constant string = constant string, values not-equal
  if:something1
    =:something
    throw:Assert error, [if] misbehaved


Compare constant integer = constant integer, values equal
  if:int:1
    =:int:1
  else
    throw:Assert error, [if] misbehaved


Compare constant integer = constant integer, values not equal
  if:int:2
    =:int:1
    throw:Assert error, [if] misbehaved


Compare constant boolean = constant boolean, values true
  if:bool:true
    =:bool:true
  else
    throw:Assert error, [if] misbehaved


Compare constant boolean = constant boolean, values false
  if:bool:false
    =:bool:false
  else
    throw:Assert error, [if] misbehaved


Compare constant boolean = constant boolean, values not-equal
  if:bool:false
    =:bool:true
    throw:Assert error, [if] misbehaved


Compare constant boolean = constant boolean, values not-equal, reversed
  if:bool:true
    =:bool:false
    throw:Assert error, [if] misbehaved


Compare constant boolean = constant string
  if:true
    =:bool:true
    throw:Assert error, [if] misbehaved


Compare constant boolean = constant string, reversed
  if:bool:true
    =:true
    throw:Assert error, [if] misbehaved


Compare constant integer = constant string
  if:int:1
    =:1
    throw:Assert error, [if] misbehaved


Compare expression boolean = constant boolean, values equal
  _data:bool:true
  if:x:/-?value
    =:bool:true
  else
    throw:Assert error, [if] misbehaved


Compare expression boolean = constant boolean, values equal, reversed
  _data:bool:true
  if:bool:true
    =:x:/@_data?value
  else
    throw:Assert error, [if] misbehaved


Compare expression boolean = constant string, converted, yields true
  _data:true
  if:bool:true
    =:x:/@_data?value.bool
  else
    throw:Assert error, [if] misbehaved


Compare expression boolean = constant string, converted, yields false
  _data:false
  if:bool:true
    =:x:/@_data?value.bool
    throw:Assert error, [if] misbehaved


Compare constant string != constant string, values equal
  if:something
    !=:something
    throw:Assert error, [if] misbehaved


Compare constant string != constant string, values not-equal
  if:something1
    !=:something
  else
    throw:Assert error, [if] misbehaved


Compare constant integer != constant integer, values equal
  if:int:1
    !=:int:1
    throw:Assert error, [if] misbehaved


Compare constant integer != constant integer, values equal
  if:int:2
    !=:int:1
  else
    throw:Assert error, [if] misbehaved


Compare constant boolean != constant boolean, values true
  if:bool:true
    !=:bool:true
    throw:Assert error, [if] misbehaved


Compare constant boolean != constant boolean, values false
  if:bool:false
    !=:bool:false
    throw:Assert error, [if] misbehaved


Compare constant boolean != constant boolean, values not-equal
  if:bool:false
    !=:bool:true
  else
    throw:Assert error, [if] misbehaved


Compare constant boolean != constant boolean, values not-equal, reversed
  if:bool:true
    !=:bool:false
  else
    throw:Assert error, [if] misbehaved


Compare constant boolean != constant string
  if:true
    !=:bool:true
  else
    throw:Assert error, [if] misbehaved


Compare constant boolean != constant string, reversed
  if:bool:true
    !=:true
  else
    throw:Assert error, [if] misbehaved


Compare expression boolean value != constant boolean, values equal
  _data:bool:true
  if:x:/-?value
    !=:bool:true
    throw:Assert error, [if] misbehaved


Compare expression boolean value != constant boolean, values equal, expression reversed
  _data:bool:true
  if:bool:true
    !=:x:/@_data?value
    throw:Assert error, [if] misbehaved


Compare constant string > constant string, yields false
  if:a
    >:b
    throw:Assert error, [if] misbehaved


Compare constant string > constant string, yields true
  if:b
    >:a
  else
    throw:Assert error, [if] misbehaved


Compare constant bool > constant bool, yields false
  if:bool:false
    >:bool:true
    throw:Assert error, [if] misbehaved


Compare constant bool > constant bool, yields true
  if:bool:true
    >:bool:false
  else
    throw:Assert error, [if] misbehaved


Compare constant int > constant int, yields false
  if:int:1
    >:int:2
    throw:Assert error, [if] misbehaved


Compare constant int > constant int, yields true
  if:int:2
    >:int:1
  else
    throw:Assert error, [if] misbehaved


Compare constant string < constant string, yields false
  if:b
    <:a
    throw:Assert error, [if] misbehaved


Compare constant string < constant string, yields true
  if:a
    <:b
  else
    throw:Assert error, [if] misbehaved


Compare constant bool < constant bool, yields false
  if:bool:true
    <:bool:false
    throw:Assert error, [if] misbehaved


Compare constant bool < constant bool, yields true
  if:bool:false
    <:bool:true
  else
    throw:Assert error, [if] misbehaved


Compare constant int < constant int, yields false
  if:int:2
    <:int:1
    throw:Assert error, [if] misbehaved


Compare constant int < constant int, yields true
  if:int:1
    <:int:2
  else
    throw:Assert error, [if] misbehaved


Compare constant string >= constant string, yields false
  if:a
    >=:b
    throw:Assert error, [if] misbehaved


Compare constant string >= constant string, yields true
  if:b
    >=:a
  else
    throw:Assert error, [if] misbehaved


Compare constant string <= constant string, yields false
  if:b
    <=:a
    throw:Assert error, [if] misbehaved


Compare constant string <= constant string, yields true
  if:a
    <=:b
  else
    throw:Assert error, [if] misbehaved


/*
 * Logical operators
 */


Or, evaluates to true
  if:bool:false
    or:bool:true
  else
    throw:Assert error, [if] misbehaved


Or, evaluates to true, reversed
  if:bool:true
    or:bool:false
  else
    throw:Assert error, [if] misbehaved


Or, double up, evaluates to true
  if:bool:false
    or:bool:false
    or:bool:true
  else
    throw:Assert error, [if] misbehaved


Or, double up, evaluates to true, reversed
  if:bool:true
    or:bool:false
    or:bool:false
  else
    throw:Assert error, [if] misbehaved


Or, double up, evaluates to true, reversed, true in middle
  if:bool:false
    or:bool:true
    or:bool:false
  else
    throw:Assert error, [if] misbehaved


Or, exists constant
  if:bool:false
    or:something
  else
    throw:Assert error, [if] misbehaved


Or, exists constant, reversed
  if:something
    or:bool:false
  else
    throw:Assert error, [if] misbehaved


Or, not, exists constant
  if:bool:false
    or:something
    not
    throw:Assert error, [if] misbehaved


Or, not, exists constant, reversed
  if:something
    or:bool:false
    not
    throw:Assert error, [if] misbehaved


Or, not, double up, evaluates to true, reversed, true in middle
  if:bool:false
    or:bool:true
    or:bool:false
    not
    throw:Assert error, [if] misbehaved


And, yields false
  if:bool:false
    and:bool:true
    throw:Assert error, [if] misbehaved


And, yields true
  if:bool:true
    and:bool:true
  else
    throw:Assert error, [if] misbehaved


And, not, yields false
  if:bool:false
    and:bool:true
    not
  else
    throw:Assert error, [if] misbehaved


And, not, yields true
  if:bool:true
    and:bool:true
    not
    throw:Assert error, [if] misbehaved


/*
 * Complex composite conditions.
 */


Complex, and or, yields true
  if:bool:true
    and:bool:false
    or:x
  else
    throw:Assert error, [if] misbehaved


Complex, and or, yields false
  if:bool:true
    and:bool:false
    or:bool:false
    throw:Assert error, [if] misbehaved


Complex, and or, not, yields true
  if:bool:true
    and:bool:false
    or:x
    not
    throw:Assert error, [if] misbehaved


Complex, and or, not, yields false
  if:bool:true
    and:bool:false
    or:bool:false
    not
  else
    throw:Assert error, [if] misbehaved


Complex, and or, and presedence, yields true
  if:bool:false
    and:bool:false
    or:bool:true
    and:bool:true
  else
    throw:Assert error, [if] misbehaved


Complex, and or, and presedence, yields false
  if:bool:false
    and:bool:false
    or:bool:true
    and:bool:false
    throw:Assert error, [if] misbehaved


Complex, and or, not, and presedence, yields true
  if:bool:false
    and:bool:false
    or:bool:true
    and:bool:true
    not
    throw:Assert error, [if] misbehaved


Complex, and or, not, and presedence, yields false
  if:bool:false
    and:bool:false
    or:bool:true
    and:bool:false
    not
  else
    throw:Assert error, [if] misbehaved


/*
 * Nested complex composite conditions.
 */


Nested, scope test, yields true
  if:bool:false
    or:bool:false
      or:bool:true
  else
    throw:Assert error, [if] misbehaved


Nested, scope test, not, yields false
  if:bool:false
    or:bool:false
      or:bool:true
      not
    throw:Assert error, [if] misbehaved


Nested, scope test, not one up, yields false
  if:bool:false
    or:bool:false
      or:bool:true
    not
    throw:Assert error, [if] misbehaved


Nested, scope test, not one up, yields true
  if:bool:false
    or:bool:false
      or:bool:false
    not
  else
    throw:Assert error, [if] misbehaved


Nested, scope test, and, not, yields true
  if:bool:false
    or:bool:true
    and:bool:false
    not
  else
    throw:Assert error, [if] misbehaved


Nested, scope test, and, not, yields false
  if:bool:false
    or:bool:true
    and:bool:true
    not
    throw:Assert error, [if] misbehaved


/*
 * Misc.
 */


Misc, not in middle
  if:bool:false
    or:bool:false
    not
    and:bool:true
  else
    throw:Assert error, [if] misbehaved


Misc, not in middle, notted
  if:bool:false
    or:bool:false
    not
    and:bool:true
    not
    throw:Assert error, [if] misbehaved


Misc, rich composite example 1
  _data1:foo
  _data2:int:5
  _data3:bool:false
  if:x:/@_data1?value
    =:foo
    and:x:/@_data2?value
      =:int:5
      and:x:/@_data3?value
      not
  else
    throw:Assert error, [if] misbehaved


Misc, rich composite example 2
  _data1:foo
  _data2:int:5
  _data3:bool:false
  if:x:/@_data1?value
    =:foo
    and:x:/@_data2?value
      =:int:5
      and:x:/@_data3?value
      not
      not
    throw:Assert error, [if] misbehaved


Misc, rich composite example 3
  _data1:foo
  _data2:int:5
  _data3:bool:true
  if:x:/@_data1?value
    =:foo
    and:x:/@_data2?value
      =:int:5
      and:x:/@_data3?value
  else
    throw:Assert error, [if] misbehaved


Misc, rich composite example 3
  _data1:foo
  _data2:int:5
  _data3:bool:true
  if:x:/@_data1?value
    =:bar
    or:x:/@_data2?value
      =:int:4
      or:x:/@_data3?value.string
        =:true
  else
    throw:Assert error, [if] misbehaved


Misc, rich composite example 4
  _data1:foo
  _data2:int:5
  _data3:bool:true
  if:x:/@_data1?value
    =:bar
    or:x:/@_data2?value
      =:int:4
      or:x:/@_data3?value.string
        =:true
      and:x:/@_nothing
    throw:Assert error, [if] misbehaved


Misc, rich composite example 5
  _data1:foo
  _data2:int:5
  _data3:bool:true
  if:x:/@_data1?value
    =:bar
    or:x:/@_data2?value
      =:int:4
      or:x:/@_data3?value.string
        =:true
      and:x:/@_nothing
        not
  else
    throw:Assert error, [if] misbehaved


Misc, rich composite example 6
  _data1:foo
  _data2:int:5
  _data3:bool:true
  if:x:/@_data1?value
    =:foo
    and:x:/@_data2?value
      =:int:4
      or:x:/@_data3?value.string
        =:true


Misc, rich composite example 7
  _data1:foo
  _data2:int:5
  _data3:bool:true
  if:x:/@_data1?value
    =:foo
    and:x:/@_data2?value
      =:int:4
      or:x:/@_data3?value.string
        =:true
        not
    throw:Assert error, [if] misbehaved


Misc, compare nodes, yields true
  _data1:howdy
    foo:bar
  _data1:howdy
    foo:bar
  if:x:/../*/_data1/[0,1]
    =:x:/../*/_data1/[1,2]
  else
    throw:Assert error, [if] misbehaved


Misc, compare nodes, yields false
  _data1:howdy
    foo:bar
  _data1:howdy
    foo:bar1
  if:x:/../*/_data1/[0,1]
    =:x:/../*/_data1/[1,2]
    throw:Assert error, [if] misbehaved


Misc, compare nodes, types, yields true
  _data1:howdy
    foo:int:5
  _data1:howdy
    foo:int:5
  if:x:/../*/_data1/[0,1]
    =:x:/../*/_data1/[1,2]
  else
    throw:Assert error, [if] misbehaved


Misc, compare nodes, wrong type, yields false
  _data1:howdy
    foo:int:5
  _data1:howdy
    foo:5
  if:x:/../*/_data1/[0,1]
    =:x:/../*/_data1/[1,2]
    throw:Assert error, [if] misbehaved


Misc, else-if
  _data1:howdy
    foo:int:5
  _data1:howdy
    foo:5
  if:x:/../*/_data1/[0,1]
    =:x:/../*/_data1/[1,2]
    throw:Assert error, [if] misbehaved
  else-if:x:/../*/_data1/[0,1]
    =:node:@"_data1:howdy
  foo:int:5"
  else
    throw:Assert error, [if] misbehaved


Misc, compare lists nodes
  _data1
    foo1:bar1
    foo2:bar2
  _data2
    foo1:bar1
    foo2:bar2
  if:x:/@_data1/*
    =:x:/@_data2/*
  else
    throw:Assert error, [if] misbehaved


Misc, compare lists values
  _data1
    foo1:bar1
    foo2:bar2
  _data2
    foo1:bar1
    foo2:bar2
  if:x:/@_data1/*?value
    =:x:/@_data2/*?value
  else
    throw:Assert error, [if] misbehaved


Misc, compare lists count
  _data1
    foo1:bar1
    foo2:bar2
  _data2
    foo1:bar1
    foo2:bar2
  if:x:/@_data1/*?count
    =:x:/@_data2/*?count
  else
    throw:Assert error, [if] misbehaved


Misc, compare lists count, yields false
  _data1
    foo1:bar1
    foo2:bar2
    foo3:bar3
  _data2
    foo1:bar1
    foo2:bar2
  if:x:/@_data1/*?count
    =:x:/@_data2/*?count
    throw:Assert error, [if] misbehaved


Misc, compare lists nodes, yields false
  _data1
    foo1:bar1
    foo2:bar2
    foo3:bar3
  _data2
    foo1:bar1
    foo2:bar2
  if:x:/@_data1/*
    =:x:/@_data2/*
    throw:Assert error, [if] misbehaved


Misc, compare lists values, yields false
  _data1
    foo1:bar1
    foo2:bar2
    foo3:bar3
  _data2
    foo1:bar1
    foo2:bar2
  if:x:/@_data1/*?value
    =:x:/@_data2/*?value
    throw:Assert error, [if] misbehaved


Misc, compare > lists values counts
  _data1
    foo1:bar1
    foo2:bar2
    foo3:bar3
  _data2
    foo1:bar1
    foo2:bar2
  if:x:/@_data1/*?value
    >:x:/@_data2/*?value
  else
    throw:Assert error, [if] misbehaved


Misc, compare < lists values counts
  _data1
    foo1:bar1
    foo2:bar2
    foo3:bar3
  _data2
    foo1:bar1
    foo2:bar2
  if:x:/@_data1/*?value
    <:x:/@_data2/*?value
    throw:Assert error, [if] misbehaved


Misc, event condition, yields false
  if
    eval
      return:bool:false
    throw:Assert error, [if] misbehaved


Misc, event condition, yields true
  if
    eval
      return:bool:true
  else
    throw:Assert error, [if] misbehaved


Misc, dynamic event condition, yields false
  create-event:sys42.tests.branching-yields-false
    return:bool:false
  if
    sys42.tests.branching-yields-false
    throw:Assert error, [if] misbehaved


Misc, dynamic event condition, yields true
  create-event:sys42.tests.branching-yields-true
    return:bool:true
  if
    sys42.tests.branching-yields-true
  else
    throw:Assert error, [if] misbehaved


Misc, with formatted string
  if:{0}
    :x
    =:x
  else
    throw:Assert error, [if] misbehaved


Misc, with formatted expression
  _x:x
  if:x:/@{0}?value
    :_x
    =:x
  else
    throw:Assert error, [if] misbehaved


Not, with formatting expression
  _data
  if:x:/../*/{0}
    :_data
    not
    throw:Assert error, [if] misbehaved
