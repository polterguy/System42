
/*
 * Unit tests for creation and manipulation of users in the system.
 *
 * Notice, since deletion of a user will delete folders on disc, inside the AppDomain, this will stop the web server, at least
 * when running within the context of XSP on Mac in Mono. Therefor, we have by default disabled this entire Unit Test, since it
 * will stop the web app's execution, and kill the web site.
 *
 * If you wish to enable this Unit Test, running on Windows for instance, you can rename the file, and remove its ".XXX" extension.
 */


Create and delete a user

  // Checking if our testing user already exist, and if so, deleting him.
  p5.auth.users.list
  if:x:/-/*/foo-bar
    p5.auth.users.delete:foo-bar

  // Creating our user.
  p5.auth.users.create:foo-bar
    role:foo-bar-role
    password:foo

  // Checking that user exist, and that folder structure is coorectly applied.
  p5.auth.users.list
  p5.auth.roles.list
  p5.auth.users.get:foo-bar
  if:x:/-
    !=:node:@"p5.auth.users.get
  foo-bar
    role:foo-bar-role"
    or:x:/@p5.auth.users.list/*/foo-bar
      not
    or
      fetch:x:/0/0?value
        p5.io.folder.exists:/users/foo-bar/temp/
      not
    or
      fetch:x:/0/0?value
        p5.io.folder.exists:/users/foo-bar/documents/private/
      not
    or
      fetch:x:/0/0?value
        p5.io.folder.exists:/users/foo-bar/documents/public/
      not
    or:x:/@p5.auth.roles.list/*/foo-bar-role
      not
    throw:@"Assert error, user folder structure was not created correctly, or role was not correctly retrieved!"

  // Deletes user, and verifies that disc is cleaned up.
  p5.auth.users.delete:foo-bar
  p5.auth.users.list
  if:x:/-/*/foo-bar
    or
      fetch:x:/0/0?value
        p5.io.folder.exists:/users/foo-bar/
    throw:Assert error, p5.auth misbehaved


Create a user with custom settings associated

  // Checking if our testing user already exist, and if so, deleting him.
  p5.auth.users.list
  if:x:/-/*/foo-bar
    p5.auth.users.delete:foo-bar

  // Creating our user.
  p5.auth.users.create:foo-bar
    role:foo-bar-role
    password:foo
    foo1:bar1
      foo2:bar2

  // Checking that user exist, and that settings was correctly applied.
  p5.auth.users.get:foo-bar
  if:x:/-
    !=:node:@"p5.auth.users.get
  foo-bar
    role:foo-bar-role
    foo1:bar1
      foo2:bar2"
    throw:Assert error, p5.auth misbehaved

  // Deletes user.
  p5.auth.users.delete:foo-bar


Modify user settings

  // Checking if our testing user already exist, and if so, deleting him.
  p5.auth.users.list
  if:x:/-/*/foo-bar
    p5.auth.users.delete:foo-bar

  // Creating our user.
  p5.auth.users.create:foo-bar
    role:foo-bar-role
    password:foo

  // Modifying user's settings.
  p5.auth.users.edit:foo-bar
    foo1:bar1
      foo2:bar2
    howdy
      world

  // Checking that user exist, and that settings was correctly applied.
  p5.auth.users.get:foo-bar
  if:x:/-
    !=:node:@"p5.auth.users.get
  foo-bar
    role:foo-bar-role
    foo1:bar1
      foo2:bar2
    howdy
      world"
    throw:Assert error, p5.auth misbehaved

  // Modifying user's settings.
  p5.auth.users.edit:foo-bar
    foo1:bar1

  // Checking that user exist, and that settings was correctly applied.
  p5.auth.users.get:foo-bar
  if:x:/-
    !=:node:@"p5.auth.users.get
  foo-bar
    role:foo-bar-role
    foo1:bar1"
    throw:Assert error, p5.auth misbehaved

  // Modifying user's settings, removing all settings.
  p5.auth.users.edit:foo-bar
  p5.auth.users.get:foo-bar
  if:x:/-
    !=:node:@"p5.auth.users.get
  foo-bar
    role:foo-bar-role"
    throw:Assert error, p5.auth misbehaved

  // Deletes user.
  p5.auth.users.delete:foo-bar
