/*
 * Unit tests for [add].
 */


/*
 * Static source tests.
 */


Static source returning one node
  _data
  add:x:/-
    src
      foo:bar
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Static source returning multiple nodes
  _data
  add:x:/-
    src
      foo1:bar1
      foo2:bar2
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [add] misbehaved


Static source returning node value by reference
  _data
  add:x:/-
    src:node:"foo:bar"
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Static source returning single string value
  _data
  add:x:/-
    src:"foo:bar"
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Static source returning single string value, converted into multiple nodes
  _data
  add:x:/-
    src:@"foo1:bar1
foo2:bar2"
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [add] misbehaved


Static source returning single formatted string value
  _data
  add:x:/-
    src:"foo:{0}"
      :bar
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Static source returning single formatted string expression value
  _bar:bar
  _data
  add:x:/-
    src:"foo:{0}"
      :x:/@_bar?value
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Static source returning single formatted string relative expression value
  _bar:bar
  _data
  add:x:/-
    src:"foo:{0}"
      :x:/0?value
        _foo:bar
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Static sources returning one node each
  _data
  add:x:/-
    src
      foo1:bar1
    src
      foo2:bar2
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [add] misbehaved


Static sources returning multiple nodes each
  _data
  add:x:/-
    src
      foo1:bar1
      foo2:bar2
    src
      foo3:bar3
      foo4:bar4
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2
  foo3:bar3
  foo4:bar4"
    throw:Assert error, [add] misbehaved


/*
 * Expression source tests.
 */


Expression source returning single node
  _data
  _src
    foo:bar
  add:x:/@_data
    src:x:/@_src/*
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Expression source returning multiple nodes
  _data
  _src
    foo1:bar1
    foo2:bar2
  add:x:/@_data
    src:x:/@_src/*
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [add] misbehaved


Expression source returning multiple nodes, from cross-section of lambda
  _data
  _src
    foo1:bar1
  _src
    foo2:bar2
  add:x:/@_data
    src:x:/../*/_src/*
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [add] misbehaved


Expression source leading to single node constant value by reference
  _data
  _src:node:"foo:bar"
  add:x:/@_data
    src:x:/@_src?value
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Expression source leading to a single string value, converted into node
  _data
  _src:"foo:bar"
  add:x:/@_data
    src:x:/@_src?value
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Expression source leading to a single string, converted to multiple nodes
  _data
  _src:@"foo1:bar1
foo2:bar2"
  add:x:/@_data
    src:x:/@_src?value
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [add] misbehaved


Expression sources leading to a single node each
  _data
  _src1
    foo1:bar1
  _src2
    foo2:bar2
  add:x:/@_data
    src:x:/@_src1/*
    src:x:/@_src2/*
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [add] misbehaved


Expression sources leading to multiple nodes each
  _data
  _src1
    foo1:bar1
    foo2:bar2
  _src2
    foo3:bar3
    foo4:bar4
  add:x:/@_data
    src:x:/@_src1/*
    src:x:/@_src2/*
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2
  foo3:bar3
  foo4:bar4"
    throw:Assert error, [add] misbehaved


/*
 * Active Event source.
 */


Active event returning constant node
  _data
  add:x:/-
    eval
      return:node:"foo:bar"
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Active event returning multiple constant nodes
  _data
  add:x:/-
    eval
      return
        foo1:bar1
        foo2:bar2
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [add] misbehaved


Active event returning single node from expression
  _data
  add:x:/-
    eval
      _ret
        foo:bar
      return:x:/-/*
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Active event returning multiple nodes from expression
  _data
  add:x:/-
    eval
      _ret
        foo1:bar1
        foo2:bar2
      return:x:/-/*
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [add] misbehaved


Active event returning single constant string
  _data
  add:x:/-
    eval
      return:"foo:bar"
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Active event returning single constant node
  create-event:sys42.tests.add.return-node
    return:node:"foo:bar"
  _data
  add:x:/-
    sys42.tests.add.return-node
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


Active event returning multiple constant nodes
  create-event:sys42.tests.add.return-nodes
    return
      foo1:bar1
      foo2:bar2
  _data
  add:x:/-
    sys42.tests.add.return-nodes
  if:x:/@_data
    !=:node:@"_data
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [add] misbehaved


Active event returning string that converts into single node
  create-event:sys42.tests.add.return-string
    return:"foo:bar"
  _data
  add:x:/-
    sys42.tests.add.return-string
  if:x:/@_data
    !=:node:@"_data
  foo:bar"
    throw:Assert error, [add] misbehaved


/*
 * Tests expecting exceptions to be raised
 */


Throws on no destination
  _result
  try
    add
      src
        foo:bar
  catch
    set:x:/@_result?value
      src:success
  if:x:/@_result?value
    !=:success
    throw:Assert error, [add] misbehaved


Throws on bad destination
  _result
  try
    add:foo-bar
      src
        foo:bar
  catch
    set:x:/@_result?value
      src:success
  if:x:/@_result?value
    !=:success
    throw:Assert error, [add] misbehaved


Throws when destination is value type
  _result
  try
    add:x:/@_result?value
      src
        foo:bar
  catch
    set:x:/@_result?value
      src:success
  if:x:/@_result?value
    !=:success
    throw:Assert error, [add] misbehaved


Throws when destination is name type
  _result
  try
    add:x:/@_result?name
      src
        foo:bar
  catch
    set:x:/@_result?value
      src:success
  if:x:/@_result?value
    !=:success
    throw:Assert error, [add] misbehaved


Throws when destination is count type
  _result
  try
    add:x:/@_result?count
      src
        foo:bar
  catch
    set:x:/@_result?value
      src:success
  if:x:/@_result?value
    !=:success
    throw:Assert error, [add] misbehaved


/*
 * Misc. tests.
 */


Misc, no throw on non-existing destination
  add:x:/@_non-existing
    src
      foo:bar


Misc, no throw on no source
  _result
  add:x:/@_result
  if:x:/@_result
    !=:node:"_result"
    throw:Assert error, [add] misbehaved


Misc, no throw when source leads to nothing
  _result
  add:x:/@_result
    src:x:/@_nothing
  if:x:/@_result
    !=:node:"_result"
    throw:Assert error, [add] misbehaved


Misc, source nodes are cloned
  _result
  _src
    foo:bar
  add:x:/@_result
    src:x:/@_src/*
  if:x:/@_result
    !=:node:@"_result
  foo:bar"
    or:x:/@_src
      !=:node:@"_src
  foo:bar"
    throw:Assert error, [add] misbehaved
