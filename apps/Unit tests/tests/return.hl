
/*
 * Unit tests for [return]
 */


Stop further execution
  return
    throw:Assert error, [return] misbehaved


Return constant value
  _x
    return:success
  if
    eval:x:/@_x
    !=:success
    throw:Assert error, [return] misbehaved


Return formatted value
  _x
    return:succ{0}
      :ess
  if
    eval:x:/@_x
    !=:success
    throw:Assert error, [return] misbehaved


Return static nodes
  _x
    return
      foo:bar
  if
    fetch:x:/0
      eval:x:/@_x
    !=:node:@"eval
  foo:bar"
    throw:Assert error, [return] misbehaved


Return expression single value
  _x
    _ret:success
    return:x:/@_ret?value
  if
    eval:x:/@_x
    !=:success
    throw:Assert error, [return] misbehaved


Return expression single name
  _x
    _ret
    return:x:/@_ret?name
  if
    eval:x:/@_x
    !=:_ret
    throw:Assert error, [return] misbehaved


Return expression count
  _x
    _data
      foo1
      foo2
    return:x:/@_data/*?count
  if
    eval:x:/@_x
    !=:int:2
    throw:Assert error, [return] misbehaved


Return expression single node
  _x
    _data
      foo1:bar1
    return:x:/@_data/*
  eval:x:/@_x
  if:x:/@eval
    !=:node:@"eval
  foo1:bar1"
    throw:Assert error, [return] misbehaved


Return expression multiple nodes
  _x
    _data
      foo1:bar1
      foo2:bar2
    return:x:/@_data/*
  eval:x:/@_x
  if:x:/@eval
    !=:node:@"eval
  foo1:bar1
  foo2:bar2"
    throw:Assert error, [return] misbehaved


Nested returns
  _x
    _x2
      return:success1
    if
      eval:x:/@_x2
      !=:success1
      return:failure
    return:success2
  if
    eval:x:/@_x
    !=:success2
    throw:Assert error, [return] misbehaved


Inside if
  _x
    if:x:/..?name
      =:_x
      return:success
    return:failure
  if
    eval:x:/@_x
    !=:success
    throw:Assert error, [return] misbehaved


Inside while
  _x
    _data:int:5
    while:bool:true
      set:x:/@_data?value
        -:x:/@_data?value
          _:int:1
      insert-before:x:/../0
        src:"foo:{0}"
          :x:/@_data?value
      return:x:/@_data?value
  if
    eval:x:/@_x
    !=:int:4
    or:x:/@eval/*?count
      !=:int:1
    or:x:/@eval/0
      !=:node:"foo:4"
    throw:Assert error, [return] misbehaved


Inside for-each
  _x
    _data
      foo1:success
      foo2:error
    for-each:x:/@_data/*?value
      insert-before:x:/../0
        src:x:/@_dp?value
      return:x:/@_dp?value
  if
    eval:x:/@_x
    !=:success
    or:x:/@eval/0
      !=:node:success
    or:x:/@eval/*?count
      !=:int:1
    throw:Assert error, [return] misbehaved


Inside nested if
  _x
    if:x:/..?name
      =:_x
      if:x:/..?name
        =:_x
        return:success
    throw:Code that was never supposed to be evaluated was evaluated
  if
    eval:x:/@_x
    !=:success
    throw:Assert error, [return] misbehaved


Inside nested while
  _x
    _data:int:5
    while:bool:true
      while:bool:true
        set:x:/@_data?value
          -:x:/@_data?value
            _:int:1
        insert-before:x:/../0
          src:"foo:{0}"
            :x:/@_data?value
        return:x:/@_data?value
  if
    eval:x:/@_x
    !=:int:4
    or:x:/@eval/*?count
      !=:int:1
    or:x:/@eval/0
      !=:node:"foo:4"
    throw:Assert error, [return] misbehaved


Inside nested for-each
  _x
    _data
      foo1:success
      foo2:error
    for-each:x:/@_data/*?value
      for-each:x:/./*
        insert-before:x:/../0
          src:x:/..for-each/@_dp?value
        return:x:/..for-each/@_dp?value
  if
    eval:x:/@_x
    !=:success
    or:x:/@eval/0
      !=:node:success
    or:x:/@eval/*?count
      !=:int:1
    throw:Assert error, [return] misbehaved
