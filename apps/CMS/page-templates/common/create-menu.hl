
/*
 * Making sure we have our "navbar wrapper" widget, unless it's already created from before
 */
if
  fetch:x:/0/0?value
    p5.web.widgets.exists:main-navbar-wrapper
  not
  set:x:/+/**/={_extra-css-classes}?value
    src:x:/../*/__extra-css-classes?value
  p5.web.widgets.create-container:main-navbar-wrapper
    parent:cnt
    position:0
    element:nav
    class:navbar navbar-default navbar-fixed-top
    widgets
      container
        class:container-fluid
        widgets
          literal:header
            element:h1
            class:main-page-header hidden-xs
          container
            class:navbar-header
            widgets

              /*
                * Toggles visibility of navbar, only visible in small screen resolutions
                */
              literal:toggle-navbar
                element:button
                type:button
                class:navbar-toggle collapsed
                data-toggle:collapse
                data-target:#navbar-main
                aria-expanded:false
                innerValue:@"<span class=""icon-bar""></span>"

          /*
            * Main menu items wrapper
            */
          container:navbar-main
            class:collapse navbar-collapse
            widgets

              /*
                * This is where all your menu items ends up, as child widgets
                */
              container:main-menu
                element:ul
                class:nav navbar-nav
                events

                  /*
                    * Creates the menu of our page
                    */
                  sys42.cms.create-navbar-menu
                    sys42.utilities.execute-lambda-file:@CMS/page-templates/common/create-menu.hl
                      _extra-css-classes:{_extra-css-classes}
else

  /*
   * Making sure we delete any previous menus created
   */
  p5.web.widgets.clear:main-menu



/*
 * Then applying any additional CSS classes passed into file as "arguments"
 */
if:x:/../*/_extra-css-classes?value
  eval-x:x:/+/*
  sys42.utilities.add-css-classes:main-navbar-wrapper
    class:x:/../*/_extra-css-classes?value

/*
  * Retrieving current Context user for later, since we'll need to check his role, 
  * to see which pages he or she has access to
  */
p5.auth.misc.whoami

/*
  * Selecting all [p5.page] objects from database, and looping through them, to
  * create a menu item for each [p5.page] object current Context user has access to.
  * 
  * We exclude the "app-loader" page, since it is not an actual page per se. 
  * In addition, we also exclude pages that contains the text "/invisible" in their URLs, such that 
  * the user can create pages that are not visible in the menu, but only accessible through a 
  * direct link.
  */
p5.data.select:x:@"/*/*/p5.page!(/*/*/p5.page/""=/app-loader""|/*/*/p5.page/""=~/invisible"")"
for-each:x:/../*/p5.data.select/[0,1]/*

  // Menu item "template"
  _create-item
    p5.web.widgets.create-literal
      parent:main-menu
      element:li
      innerValue

  // Verifying user has access to currently iterated [p5.page] object
  if
    sys42.cms.verify-access:x:/..for-each/*/_dp/#/*/role?value

    // Creating menu item, settings properties first
    set:x:/..for-each/*/_create-item/*/p5.web.widgets.create-literal/*/innerValue?value
      src:@"<a href=""{0}"">{1}</a>"
        :x:/..for-each/*/_dp/#?value
        :x:/..for-each/*/_dp/#/*/name?value

    // Checking if this is a nested menu item
    p5.string.split:x:/..for-each/*/_dp/#?value
      =:/
    if:x:/./*/p5.string.split/*?count
      >:int:1

      // This was a "nested" item, checking if parent item(s) for current item is already created
      // We do support nested menu items, although if user creates a page with more than two levels
      // of nesting, we warn during creation of page that it is "not a good idea!"
      set:x:/././*/p5.string.split/0/-
      _cur
      _last:main-menu
      for-each:x:/././*/p5.string.split/*?name
        set:x:/././*/_cur?value
          src:{0}{1}
            :x:/././././*/_cur?value
            :x:/..for-each/*/_dp?value
        if
          fetch:x:/0/0?value
            p5.web.widgets.exists:{0}-menu-item
              :x:/..for-each/./*/_cur?value
          not

          // Root item for current nested item is not created, creating it
          eval-x:x:/+|/+/**
          p5.web.widgets.create-container:{0}-menu-wrp
            :x:/..for-each/./*/_cur?value
            parent:x:/..for-each/./*/_last?value
            element:li
            class:dropdown
            widgets
              literal
                element:a
                href:#
                class:dropdown-toggle
                data-toggle:dropdown
                role:button
                aria-haspopup:true
                aria-expanded:false
                innerValue:@"{0} <span class=""caret""></span>"
                  :x:/..for-each/*/_dp?value
              container:{0}-menu-item
                :x:/..for-each/./*/_cur?value
                element:ul
                class:dropdown-menu

        // Updating [parent] for current item to be root item for group
        set:x:/..for-each/..for-each/*/_create-item/*/*/parent?value
          src:{0}-menu-item
            :x:/..for-each/./*/_cur?value
        set:x:/..for-each/./*/_last?value
          src:{0}-menu-item
            :x:/..for-each/./*/_cur?value
    eval:x:/..for-each/*/_create-item
                          
/*
  * Adding login/logout button to menu
  */
if:x:/../*/p5.auth.misc.whoami/*/default?value
  =:bool:true

  /*
    * This is the default Context user, and hence user is not logged in
    * Creating our login menu item
    */
  p5.web.widgets.create-container:login-menu-button
    parent:main-menu
    element:li
    widgets
      literal
        element:a
        href:
        innerValue:Login
        onclick
          sys42.show-login-window
        events

          /*
            * Shows the login user window
            */
          sys42.show-login-window

            /*
              * Making sure we hide login menu button
              */
            p5.web.widgets.property.set:login-menu-button
              visible:false

            /*
              * Sends and includes JavaScript to page, to be able to handle Carriage Return and Escape 
              * keys in login window
              */
            p5.web.send-javascript:"$('#toggle-navbar').click();setTimeout(function(){$('#username').focus().select();},250);"
            p5.web.include-javascript:@"p5.loginUsernameKeyPressed = function(e) {
  if(e.keyCode == 13) {
    p5.$('login-button').raise('onclick');
    return false;
  }
}
p5.loginUsernameKeyUp = function(e) {
  if(e.keyCode == 27) {
    p5.$('login-button').raise('_onhide');
  }
}"

            /*
              * Creates the window encapsulating the login window
              */
            p5.web.widgets.create-container:login-wrapper
              class:form-inline login-widget
              parent:header-wrapper
              widgets
                container:login-controls
                  class:form-group
                  widgets
                    void:username
                      class:form-control
                      element:input
                      type:text
                      placeholder:Username ...
                      onkeypress:"return p5.loginUsernameKeyPressed(event);"
                      onkeyup:"p5.loginUsernameKeyUp(event);"
                    void:password
                      class:form-control
                      element:input
                      type:password
                      placeholder:Password ...
                      onkeypress:"return p5.loginUsernameKeyPressed(event);"
                      onkeyup:"p5.loginUsernameKeyUp(event);"
                    literal:login-button
                      element:button
                      class:btn btn-default form-control
                      innerValue:Login
                      onclick
                        sys42.login-button-clicked
                      _onhide
                        p5.web.widgets.delete:login-wrapper
                        p5.web.widgets.property.set:login-menu-button
                          visible:true
                      events

                        /*
                          * Logs in user according to values of "username" and "password" widgets
                          * in login form
                          */
                        sys42.login-button-clicked

                          /*
                            * Retrieves username and password supplied by user
                            */
                          p5.web.widgets.property.get:username
                            value
                          p5.web.widgets.property.get:password
                            value

                          /*
                            * Sets the username and password field's values to our [login] Active Event
                            */
                          set:x:/+2/0/*/username?value
                            src:x:/././*/p5.web.widgets.property.get/[0,1]/+/<?value
                          set:x:/+1/0/*/password?value
                            src:x:/././*/p5.web.widgets.property.get/[1,2]/+/<?value
                          if
                            p5.auth.login
                              username
                              password
                              persist:bool:true

                            /*
                             * User was successfully logged in, reloading location to
                             * make sure user sees page in context of his newly logged in credentials
                             */
                            p5.web.reload-location
                          else

                            /*
                              * User supplied wrong credentials
                              */
                            p5.web.widgets.property.set:login-controls
                              class:form-group has-error
                            p5.web.send-javascript:"p5.wrongCredentials();"
                                      

else

  /*
    * User has previously logged in with his or hers credentials
    * Creating the logout button, but first, since user is logged in, our "apps" menu items,
    * if there are any apps.
    */
  p5.io.folder.list-folders:/system42/apps/
  if:x:/-/*?count
    >:int:0
    _eval
      if
        fetch:x:/0/0?value
          p5.io.file.exists:{0}launch.hl
            :x:/../*/_dn/#?name
        not
        return
      p5.string.split:x:/./*/_dn/#?name
        =:/
      p5.html.url-encode:x:/../*/p5.string.split/0/-?name
      eval-x:x:/+/*/*/*/*
      return
        li
          widgets
            a
              href:/app-loader?app={0}
                :x:/../*/p5.html.url-encode?value
              innerValue:x:/../*/p5.string.split/0/-?name
    apply:x:/./*/p5.web.widgets.create-container/*/widgets/*/ul/*/widgets
      src:x:/././-/*
      template
        {@eval}:x:/..if/*/_eval
    p5.web.widgets.create-container
      parent:main-menu
      element:li
      widgets
        a
          href:#
          class:dropdown-toggle
          data-toggle:dropdown
          role:button
          aria-haspopup:true
          aria-expanded:false
          innerValue:@"Apps <span class=""caret""></span>"
        ul
          class:dropdown-menu
          widgets

  /*
    * Creating the logout button
    */
  p5.web.widgets.create-container
    parent:main-menu
    element:li
    widgets
      literal
        element:a
        href:
        innerValue:Logout
        onclick
          sys42.logout
        events

          /*
           * Deleting all user's session items and emptying "tmp" folder, 
           * before logging user out and reloading location, to make sure user
           * sees page in context of default Context user
           */
          sys42.logout
            p5.web.session.list
            p5.web.session.set:x:/-/*?name
            sys42.utilities.empty-user-temp-folder
            logout
            p5.web.reload-location
