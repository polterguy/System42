
/*
 * Creates the Active Event that handles an exception.
 * This event is invoked by the core P5 framework, whenever an exception of type "Exception" occurs,
 * and it will be passed in [_trace] and [_message], in addition to [_type].
 *
 * To create your own handler, that handles a specific type of exception, create an Active Event named [p5.error.MyExceptionType],
 * and it will override this guy for all exceptions of your specified type.
 */
create-event:p5.error.Exception

  /*
   * Building up some HTML, passing in the exception message and stacktrace.
   */
  set:x:/../*/_trace?value
    p5.html.html-encode:x:/../*/_trace?value
  set:x:/../*/_message?value
    p5.html.html-encode:x:/../*/_message?value
  _ret:
  set:x:/../*/_ret?value
    src:@"<h1>[{0}] - {1}</h1>"
      :x:/../*/_type?value
      :x:/../*/_message?value
  set:x:/../*/_ret?value
    src:@"{0}
<pre>{1}</pre>"
      :x:/../*/_ret?value
      :x:/../*/_trace?value

  /*
   * Changing status code.
   */
  p5.web.response.set-status-code:500
  p5.web.response.set-status-description:500 Internal server error

  /*
   * Checking if this is an Ajax callback, and if not, we surround the etire returned HTML in a <html><body></html></body> block.
   */
  if
    p5.web.request.is-ajax-callback
    not
    set:x:/../*/_ret?value
      src:@"<html>
  <head>
    <link rel=""stylesheet"" type=""text/css"" href=""/system42/apps/CMS/media/css/main.min.css""></link>
  </head>
  <body>
    <div class=""p5-exception"">
      {0}
    </div>
  </body>
</html>"
        :x:/../*/_ret?value


  /*
   * Echoing HTML built above back to client, overriding the default rendering of page.
   */
  p5.web.echo:x:/../*/_ret?value

  /*
   * Returning true to caller, indicating we have handled this exception, effectively
   * preventing the default ASP.NET logic to run.
   */
  return:bool:true

