
/*
 * Responsible for loading up the user interface. 
 * Invoked by the core P5 framework when the UI is needed.
 *
 * Argument expected to by supplied is [_url], being the URL of the page requested.
 */
create-event:p5.web.load-ui

  /* 
   * Checking if there are no users in system, at which case, user must go through installation process.
   */
  if
    p5.auth._root-password-is-null

    /*
     * There are no users in system, making sure we run through the installation process.
     */
    sys42.utilities.execute-lambda-file:@CMS/installation/install-server.hl

  else

    /*
     * Checking if we're currently downloading a file, or content.
     */
    p5.web.session.get:sys42.cms.download-filename
    p5.web.session.get:sys42.cms.download-content
    if:x:/..else/*/p5.web.session.get/[0,1]/*?value

      /*
       * We are currently downloading a file, passing it back to client, with given type (if any), and removing the session value,
       * before returning early.
       */
      p5.web.session.get:sys42.cms.download-filetype
      if:x:/-/*?value
        p5.web.header.set:Content-Type
          src:x:/@p5.web.session.get/*?value
      split:x:/..else/*/p5.web.session.get/[0,1]/*?value
        =:/
      p5.web.session.get:sys42.cms.download-filename-return
      if:x:/-/*?value
        set:x:/..if/..if/*/p5.web.header.set/*/*?value
          src:x:/@p5.web.session.get/*?value
      p5.web.header.set:Content-Disposition
        src:@"attachment; filename={0}"
          :x:/@split/0/-?name
      p5.web.session.set:sys42.cms.download-filename
      p5.web.session.set:sys42.cms.download-filename-return
      p5.web.session.set:sys42.cms.download-filetype
      p5.web.echo-file:x:/..else/*/p5.web.session.get/[0,1]/*?value
      return

    else-if:x:/..else/*/p5.web.session.get/[1,2]/*?value

      /*
       * We are currently downloading content, passing it back to client, and removing the session value,
       * before returning early.
       */
      p5.web.session.get:sys42.cms.download-content-filetype
      if:x:/-/*?value
        p5.web.header.set:Content-Type
          src:x:/@p5.web.session.get/*?value
      p5.web.session.get:sys42.cms.download-content-return
      p5.web.header.set:Content-Disposition
        src:@"attachment; filename={0}"
          :x:/@p5.web.session.get/*?value
      p5.web.session.set:sys42.cms.download-content
      p5.web.session.set:sys42.cms.download-content-return
      p5.web.session.set:sys42.cms.download-content-filetype
      p5.web.echo:x:/..else/*/p5.web.session.get/[1,2]/*?value
      return

    /*
     * Figuring out which page to load according to argument supplied in [_url].
     * Notice, if page is not found, we simply load the first page we find.
     */
    p5.data.select:x:@"(/*/*/p5.page/""={0}""|/*/*/p5.page/[0,1])/[0,1]"
      :x:/../*/_url?value

    /*
     * Checking if page exists, and if not, loading our "page not found" special page.
     */
    if:x:/-/*?count
      =:int:0

      sys42.utilities.execute-lambda-file:@CMS/page-loader/special-page/not-found.hl
        _template:@CMS/page-templates/default.hl

    else

      /*
       * Adding up all nodes from results of p5.data.select into [execute-lisp-file], which is our [p5.page] object.
       */
      add:x:/+3/*/_args
        src:x:/..else/..else/*/p5.data.select/*/*

      /*
       * Setting value of [execute-lisp-file] to type of page we're loading.
       * If you look in "system42/apps/CMS/page-loader/" folder, you will see all the different types of pages that exist 
       * in the system. These types of pages are extendible, and can be added to to create custom types of pages. 
       * If you extend them, you should probably also create an editor for your page type.
       */
      set:x:/+2?value
        src:@CMS/page-loader/{0}.hl
          :x:/..else/..else/*/p5.data.select/*/*/type?value
      eval-x:x:/+/*/_url
      sys42.utilities.execute-lambda-file
        _args
        _url:x:/../*/_url?value
