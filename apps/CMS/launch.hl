
/*
 * Creates our main CMS Widget, which actually only contains a couple of drop down lists to create 
 * new pages, and edit existing pages. In addition, it creates the "general properties toolbar",
 * which it does through invoking the "@CMS/page-editor/editor-toolbar.hl", when
 * a new page is created, or an existing page is edited.
 *
 * The rest is done by "Specialized editors", found in "/page-editor/specialized-editors/", 
 * in addition to the templates for new pages, found in "/page-editor/new-page-templates/", which
 * are used create a "default starting point" for your new page.
 *
 * About creating your own page type.
 *
 * To support custom editors for your own types of pages, you will need one file in both of those 
 * directories, matching the [type] of page you store into the database, when saving your page.
 *
 * If you do, you can "plug in" your own custom editors into the system, without having any 
 * dependencies between your own custom page types, and the rest of the system, what so ever.
 *
 * Notice, if you do, you will also need a Hyperlambda script to load up and display your page 
 * in "/page-loader/", who's name should match the "page type".
 */


/*
 * Verifying user is authorized to access this application.
 */
p5.auth.misc.whoami
if:x:/@p5.auth.misc.whoami/*/role?value
  !=:root
  throw:Sorry, this page is only accessible to root acounts


/*
 * Loads the default template.
 */
sys42.cms.load-template


/*
 * Creating our "upload page" widget.
 */
sys42.utilities.execute-lambda-file:@CMS/create-uploader.hl


/*
 * Creating our main widget, consisting of two drop down lists, and really not much more.
 */
p5.web.widgets.create-container:cms-page-editor
  parent:content
  widgets


    /*
     * The edit existing page select drop down.
     */
    container
      class:col-xs-9 col-md-10 form-group
      widgets
        container
          class:input-group
          widgets
            literal
              element:span
              class:input-group-addon
              innerValue:Edit
            container:cms-select-page
              element:select
              class:form-control
              oninit

                /*
                 * Making sure we populate the dropdown select widget with all pages from database.
                 */
                sys42.cms.populate-select-page

                /*
                 * Then checking if there's an existing page currently being edited.
                 */
                if
                  sys42.cms.get-edited-page-id

                  /*
                   * Editing page.
                   */
                  sys42.cms.edit-page

                else

                  /*
                   * Showing uploader.
                   */
                  p5.web.widgets.property.set:cms-ajax-uploader
                    visible:true

                /*
                 * Making sure we set focus to dropdown.
                 */
                p5.web.send-javascript:@"$('#{0}').focus().select();"
                  :x:/../*/_event?value

              onchange

                /*
                 * Here we start the editing of the selected page, if any.
                 * Otherwise, we simply destroy any existing editors.
                 */
                sys42.cms.selected-page-changed

              events


                /*
                 * Stores the currently edited page in session, in case user refreshes the
                 * page, or go back and forth to other apps, while editing, etc ...
                 */
                sys42.cms.set-currently-edited-page

                  /*
                   * We store the currently edited page in session, such that user can refresh page,
                   * or go to other apps, and come back, and continue editing the page he previously edited.
                   */
                  p5.web.session.set:sys42.currently-edited-page
                    src:x:/../*/_arg?value


                /*
                 * Returns the currently edited page.
                 */
                sys42.cms.get-edited-page-id

                  /*
                   * We store the currently edited page in session, such that user can refresh page,
                   * or go to other apps, and come back, and continue editing the page he previously edited.
                   */
                  p5.web.session.get:sys42.currently-edited-page
                  return:x:/@p5.web.session.get/*?value


                /*
                 * Retrieves all pages from database, and creates one option item for each of them, to allow editing pages.
                 */
                sys42.cms.populate-select-page

                  /*
                   * Clears any previously created "option" HTML elements from "select existing page for editing" drop down.
                   */
                  p5.web.widgets.clear:cms-select-page

                  /*
                   * Adding the [_default] item, which simply is an informational piece of text.
                   */
                  p5.web.widgets.create-literal
                    element:option
                    parent:cms-select-page
                    value:_default
                    innerValue:Choose existing page to edit ...

                  /*
                   * Retrieves the currently selected page, if any, such that we can set its associated "option" HTML 
                   * element to "selected".
                   */
                  sys42.cms.get-edited-page-id

                  /*
                   * Selecting all [p5.page] objects from database, and iterating through them all, such
                   * that we can create one "option" HTML element for each.
                   */
                  p5.data.select:x:/*/*/p5.page
                  for-each:x:/@p5.data.select/*

                    /*
                     * Checking if currently iterated [p5.page] is being edited, and if so, making sure the
                     * "option" HTML element for it is selected.
                     */
                    if:x:/@sys42.cms.get-edited-page-id?value
                      =:x:/@_dp/#?value
                      add:x:/..for-each/*/p5.web.widgets.create-literal
                        src
                          selected

                    /*
                     * Forward evaluating the expressions in [p5.web.widgets.create-literal], before invoking it.
                     */
                    eval-x:x:/+/*
                    p5.web.widgets.create-literal
                      element:option
                      parent:cms-select-page
                      value:x:/@_dp/#?value
                      innerValue:x:/@_dp/#/*/name?value


                /*
                 * Invoked when user selects a page for editing. 
                 * Retrieves which page user wants to edit, and starts the correct page editor according to what 
                 * type of page it is.
                 */
                sys42.cms.selected-page-changed

                  /*
                   * Figuring out which page was selected for editing, if any.
                   */
                  p5.web.widgets.property.get:cms-select-page
                    value

                  /*
                   * Setting the selected page into our session, such that we can remember it, across refresh.
                   *
                   * Notice, our little boolean algebra trick here, makes sure the value become "null" (no [_arg]),
                   * if the selected "page" was [_default], which is the informational piece of text, explaining
                   * what the dropdown's purpose is.
                   */
                  sys42.cms.set-currently-edited-page:x:/@p5.web.widgets.property.get/*/*(!/=_default)?value
                  if:x:/@p5.web.widgets.property.get/*/*(!/=_default)?value

                    /*
                     * Editing page.
                     */
                    sys42.cms.edit-page

                  else

                    /*
                     * No page is being edited, simply clear the editor surface.
                     */
                    p5.web.widgets.clear:cms-page-editor-surface

                    /*
                     * Showing uploader widget.
                     */
                    p5.web.widgets.property.set:cms-ajax-uploader
                      visible:true


    /*
     * The create new page button (dropdown).
     */
    container
      class:col-xs-3 col-md-2 btn-group
      widgets
        button
          style:"width:100%;display:block;"
          class:btn btn-primary dropdown-toggle
          data-toggle:dropdown
          aria-haspopup:true
          aria-expanded:false
          innerValue:+
        ul:cms-create-new-page
          class:dropdown-menu
          widgets
          oninit

            /*
             * Populates the "create new page" select dropdown button.
             */
            sys42.cms.populate-create-new-page

          events


            /*
             * Here we loop through all files in "/page-editor/specialized-editors/",
             * and create one "create new page" button dropdown item for each of those files.
             */
            sys42.cms.populate-create-new-page

              /*
               * Then we create one button dropdown item for each editor we have installed as a plugin 
               * in the "@CMS/page-editor/specialized-editors/" folder.
               */
              p5.io.folder.list-files:@CMS/page-editor/specialized-editors/
                filter:.hl
              for-each:x:/@p5.io.folder.list-files/*?name

                /*
                 * Removing folder name and ".hl" extension, before we set the [value] and [innerValue]
                 * of our "option" HTML element for our "create new page drop down".
                 */
                p5.string.split:x:/@_dp?value
                  =:/
                  =:.

                /*
                 * Creating our "button" HTML element for currently iterated "specialized editor".
                 */
                eval-x:x:/+/*/*/*
                p5.web.widgets.create-container
                  element:li
                  parent:cms-create-new-page
                  widgets
                    a
                      href:#
                      innerValue:x:/@p5.string.split/0/-2?name
                      onclick

                        /*
                         * First toggling (closing) bootstrap's dropdown button.
                         */
                        p5.web.widgets.find-ancestor-like:x:/../*/_event?value
                          class:btn-group
                        p5.web.widgets.find:x:/@p5.web.widgets.find-ancestor-like/*/*?value
                          element:button
                        p5.web.send-javascript:@"$('#{0}').dropdown('toggle');"
                          :x:/@p5.web.widgets.find/0/0?value

                        /*
                         * Then creating our new page.
                         */
                        p5.web.widgets.property.get:x:/../*/_event?value
                          innerValue
                        sys42.cms.create-new-page:x:/@p5.web.widgets.property.get/*/*?value


            /*
             * Here we create a new page, according to what option user selected, by
             * executing "/page-editor/create-new-page.hl", which is expected to create a new default page, of whatever
             * type was selected.
             */
            sys42.cms.create-new-page

              /*
               * Forward evaluating arguments, before invoking [sys42.utilities.execute-lambda-file] to 
               * evaluate "/page-editor/create-new-page.hl", passing in which type of page, and which template to use.
               */
              eval-x:x:/+/*
              sys42.utilities.execute-lambda-file:@CMS/page-editor/create-new-page.hl
                _type:x:/../*/_arg?value
                _template:x:/../*/_arg?value

              /*
               * Making sure we set focus to select page dropdown.
               */
              p5.web.send-javascript:@"$('#cms-select-page').focus().select();"


    /*
     * This is the widget where the actual editing occurs. 
     * It will contain an "edit property" part, which is common for all types of pages, with a "Name", "URL"
     * property, etc, in addition to the custom editor, which depends upon the type of page user is editing.
     */
    container:cms-page-editor-surface
      events


        /*
         * Invoked when a page is selected for editing, either because it was just created, 
         * or because an existing page was selected for editing. 
         *
         * Clears the editor surface, in case another page is already being edited, and starts 
         * the editing process.
         *
         * Which means that it loads up the "specialized editor", which depends upon the [type] of page, and can be 
         * found in the "/page-editor/specialized-editors/" folder.
         */
        sys42.cms.edit-page

          /*
           * Clears out any previous editors, including the common toolbar.
           */
          p5.web.widgets.clear:cms-page-editor-surface

          /*
           * Figuring out which page we're editing, if any.
           */
          sys42.cms.get-edited-page-id
          if:x:/@sys42.cms.get-edited-page-id?value

            /*
             * We are editing a page, hence we load [p5.page]'s [type] declaration from database, which is
             * needed to load "specialized editor".
             */
            p5.data.select:x:@"/*/*/p5.page/""={0}""/*/type?value"
              :x:/@sys42.cms.get-edited-page-id?value

            /*
             * Creating actual page editor, passing in ID and page type to common editor,
             * letting it load up the "specialized editor".
             */
            eval-x:x:/+/*
            sys42.utilities.execute-lambda-file:@CMS/page-editor/editor.hl
              _editor:x:/@p5.data.select/*?value
              _page-id:x:/@sys42.cms.get-edited-page-id?value

            /*
             * Hiding uploader widget.
             */
            p5.web.widgets.property.set:cms-ajax-uploader
              visible:false

          else

            /*
             * Showing uploader widget.
             */
            p5.web.widgets.property.set:cms-ajax-uploader
              visible:true
